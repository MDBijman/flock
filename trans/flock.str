module flock

imports
  desugar
  analysis
  normalize
  dependencies
  pp

  libstratego-gpp
  codegen/files/analysis-class
  codegen/files/cfg-builder-class
  codegen/files/properties-class
  codegen/files/strategies-class

rules // Debugging
  
  debug-show-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path
    ; result   := node

  debug-show-desugared:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.aterm")> path
    ; result   := <desugar-all> node
  
  debug-show-java-ast:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"java.aterm")> path
    ; result   := <flo-to-analysis-java> node

  debug-show-java:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"java")> path
    ; result   := <flo-to-analysis-java; pp-java-string> node

  debug-show-props-java:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"props.java")> path
    ; result   := <flo-to-props-java; pp-java-string> node  

  debug-show-strategies-java:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"strategies.java")> path
    ; result   := <flo-to-strategies-java; pp-java-string> node  

  debug-show-cfggraph-java:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <concat-strings> [<dirname> path, "/", "CfgGraph.java"]
    ; result   := <flo-to-cfggraph-java; pp-java-string> node

  debug-show-normalized-java:
    (selected, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"normalized.flock")> path
    ; result   := <normalize-module; pp-flock-string> selected

  debug-show-dependency-tracking-java:
    (selected, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"deptrack.flock")> path
    ; result   := <infer-dependencies; pp-flock-string> selected
  
  debug-normalize-and-compile-java:
    (selected, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"norm.flock")> path
    ; result   := <normalize-module; flo-to-analysis-java; pp-java-string> selected
  
  compile-all: t@(Module(module-path, _), _, _, _, _) -> <unzip> [ 
    <debug-normalize-and-compile-java; ?(p1, f1); !(<make-output-path(|module-name, $[[module-name]])> p1, f1)> t, 
    <debug-show-strategies-java;       ?(p2, f2); !(<make-output-path(|module-name, $[[module-name]Strategies])> p2, f2)> t,
    <debug-show-props-java;            ?(p3, f3); !(<make-output-path(|module-name, $[[module-name]Properties])> p3, f3)> t
  ] where module-name := <base-filename> module-path
  
  make-output-path(|module-name, file): base -> $[[<dirname> base]/build/[module-name]/[<guarantee-extension(|"java")> file]]
  
rules

  flo-to-analysis-java   = desugar-all; module-to-analysis-java
  flo-to-props-java      = desugar-all; module-to-props-java
  flo-to-cfggraph-java   = desugar-all; module-to-cfggraph-java
  flo-to-strategies-java = desugar-all; module-to-strategies-java

