module dependencies

imports

  signatures/flock/-

strategies

  infer-dependencies =
      topdown(try(annotate-property-definitions))
    ; topdown(try(add-dependency-annotations-lattice-method))
    ; topdown(try(add-dependencies-proprule))

  annotate-property-definitions: NoDependencies() -> WithDependencies()

strategies
  
  add-dependencies-proprule: PropRule(n, p, e, w) -> PropRule(n, <try(bind-pattern-root-to-var)> p, <bottomup(try(annotate-term-literal))> e, <bottomup(try(annotate-term-literal))> w)
  
  bind-pattern-root-to-var: Forward(name, pat) -> Forward(name, At("rootpattern", pat))
  bind-pattern-root-to-var: Backward(name, pat) -> Backward(name, At("rootpattern", pat))
  
  annotate-term-literal: term@TypedExprTerm(_, _, _) -> WithOrigin(term, [Position("rootpattern")])
  
strategies  

  add-dependency-annotations-lattice-method: Lub(p1, p2, expr)
    -> Lub(p1, p2, <topdown(try(add-dependency-annotations))> expr)
  
  add-dependency-annotations: Match(expr, arms) -> Match(expr, new-arms)
  where
    deps := <collect(gather-dependencies)> expr
  ; new-arms := <map(annotate(|deps))> arms
 
  annotate(|deps): MatchArm(pat, expr) -> MatchArm(pat, <annotate(|deps)> expr) 
  annotate(|deps): expr -> WithOrigin(expr, <map(!Var(<id>))> deps) 
 
  add-dependency-annotations: _ -> <id>
  
  gather-dependencies: Ref(name) -> name
  