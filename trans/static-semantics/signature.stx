module static-semantics/signature

imports
  static-semantics/common
  static-semantics/type

signature

  sorts
    OpDecl
    OpSort
    Signature
    SortDecl
    SortRef

    SignatureSortId = string
    SignatureOpId = string

  constructors
    SignatureSorts : list(SortDecl) -> Signature
    SignatureConstructors : list(OpDecl) -> Signature

    SignatureSortDecl : SignatureSortId -> SortDecl
    SignatureSortAlias : SignatureSortId * SortRef -> SortDecl

    SimpleReference : SignatureSortId -> SortRef

    SignatureListSort : SortRef -> SortRef
    SignatureTuple0Sort : SortRef
    SignatureTupleNSort : SortRef * list(SortRef) -> SortRef
    SignatureIntSort : SortRef
    SignatureStringSort : SortRef
    SignatureOccurrenceSort : SortRef

    SignatureOpDecl : SignatureOpId * OpSort -> OpDecl
    SignatureConstOp : SortRef -> OpSort
    SignatureArrowOp : list(SortRef) * SortRef -> OpSort

rules

  signatureOk : scope * Signature
  signaturesOk maps signatureOk(*, list(*))

  sortDeclOk : scope * SortDecl
  sortDeclsOk maps sortDeclOk(*, list(*))

  opDeclOk : scope * OpDecl
  opDeclsOk maps opDeclOk(*, list(*))

  typeOfOpSort : scope * OpSort -> (TYPE * list(TYPE))

  typeOfSortRef : scope * SortRef -> TYPE
  typeOfSortRefs maps typeOfSortRef(*, list(*)) = list(*)

  noParametricTypeInSignatures : TYPE

rules

  signatureOk(moduleScope, SignatureSorts(sortDecls)) :-
    sortDeclsOk(moduleScope, sortDecls).

  signatureOk(moduleScope, SignatureConstructors(opDecls)) :-
    opDeclsOk(moduleScope, opDecls).

  sortDeclOk(moduleScope, SignatureSortDecl(name)) :- {which' type sortTypeScope}
    @name.ref := name,
    @name.type := type,
    new sortTypeScope,
    type == USERTYPE(name, [], sortTypeScope),
    declareType(moduleScope, name, type).

  sortDeclOk(moduleScope, SignatureSortAlias(name, referringTo)) :- {referencedType}
    @name.ref := name,
    @name.type := referencedType,
    declareType(moduleScope, name, referencedType),
    typeOfSortRef(moduleScope, referringTo) == referencedType.

  opDeclOk(moduleScope, SignatureOpDecl(name, opSort)) :- {resultType argTypes type}
    @name.ref := name,
    @name.type := type,
    type == CONSTRUCTOR(resultType, argTypes),
    declareConstructor(moduleScope, name, type),
    typeOfOpSort(moduleScope, opSort) == (resultType, argTypes).

  typeOfOpSort(moduleScope, constOp@SignatureConstOp(sortRef)) = (resultT, []) :-
    @constOp.type := resultT,
    typeOfSortRef(moduleScope, sortRef) == resultT.

  typeOfOpSort(moduleScope, SignatureArrowOp(argSortRefs, resultSortRef)) = (resultType, argTypes) :-
    typeOfSortRefs(moduleScope, [resultSortRef | argSortRefs]) == [resultType | argTypes].

  typeOfSortRef(_, SignatureIntSort()) = INT().
  typeOfSortRef(moduleScope, SignatureListSort(sortRef)) = LIST(listT) :-
    typeOfSortRef(moduleScope, sortRef) == listT.
  typeOfSortRef(_, SignatureOccurrenceSort()) = OCCURRENCE().
  typeOfSortRef(_, SignatureStringSort()) = STRING().
  typeOfSortRef(_, SignatureTuple0Sort()) = TUPLE([]).
  typeOfSortRef(moduleScope, SignatureTupleNSort(firstSortRef, restSortRefs)) = TUPLE([firstT | restT]) :-
    typeOfSortRef(moduleScope, firstSortRef) == firstT,
    typeOfSortRefs(moduleScope, restSortRefs) == restT.
  typeOfSortRef(moduleScope, reference@SimpleReference(name)) = type' :- {name' typeScope}
    @name.ref := name',
    @name.type := type',
    @reference.ref := name',
    @reference.type := type',
    occurrenceType of Type{name} in moduleScope |-> [(_, (Type{name'}, type'))] | error $[The sort reference [name] could not be resolved uniquely.],
    noParametricTypeInSignatures(type').

  noParametricTypeInSignatures(USERTYPE(_, params, _)) :-
    params == [] | error "Parametric types are not allowed in signatures.".
  noParametricTypeInSignatures(_).
