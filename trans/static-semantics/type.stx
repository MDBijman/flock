module static-semantics/type

imports
  static-semantics/common
  static-semantics/expr

signature

  sorts
    ConsDef
    LatticeDef
    LatticeKind
    LatticePart
    //SimpleType = Type // SDF3 considers this an alias
    Type
    TypeDef
    TypeOrVar
    TypeKind
    Param

  constructors
    TypeDefParams : TypeName * list(Var) * TypeKind * list(ConsDef) -> TypeDef
    TypeDefNoParams : TypeName * TypeKind * list(ConsDef) -> TypeDef

    ConsDef : ConsName * list(TypeOrVar) -> ConsDef

    TypeVar: Var -> Type
    //TypeOrVarVar : Var -> TypeOrVar

    LatticeDefParams : TypeName * list(Var) * LatticeKind * list(LatticePart) -> LatticeDef
    LatticeDefNoParams : TypeName * LatticeKind * list(LatticePart) -> LatticeDef

    ValueWithoutDependencies   : LatticeKind
    ValueWithDependencies      : LatticeKind
    LatticeWithoutDependencies : LatticeKind
    LatticeWithDependencies    : LatticeKind

    LatticePartType : Type -> LatticePart
    Lub  : Param * Param * Expr -> LatticePart
    Glb  : Var * Var * Expr -> LatticePart
    Leq  : Var * Var * Expr -> LatticePart
    Geq  : Var * Var * Expr -> LatticePart
    NLeq : Var * Var * Expr -> LatticePart
    Top : Expr -> LatticePart
    Bottom : Expr -> LatticePart

    Name : Type
    SimpleTypeTerm : Type
    Index : Type
    Int : Type
    String : Type
    Float : Type
    Bool : Type
    Origin : Type
    
    Param : Var -> Param
    TypedParam : Var * Type -> Param

    UserTypeNoParams : TypeName -> Type
    UserTypeParams : TypeName * list(TypeOrVar) -> Type
    TypeTuple : TypeOrVar * TypeOrVar -> Type
    Map : TypeOrVar * Type -> Type
    Set : TypeOrVar -> Type

  constraints

    createInstTypeScope : scope * list(string) * list(TYPE) -> scope
    createInstTypeScopeInner : scope * list(string) * list(TYPE)

    isListSameType : list(TYPE)

    matchType : TYPE * TYPE
    matchTypes maps matchType(list(*), list(*))

    freshUnificationVariable : string -> TYPE
    freshUnificationVariables maps freshUnificationVariable(list(*)) = list(*)

    promoteType : scope * TYPE * string * string -> TYPE
    promoteTypes maps promoteType(*, list(*), *, *) = list(*)

    instType : scope * TYPE -> TYPE
    instTypes maps instType(*, list(*)) = list(*)

    noUnificationVariablesInType : TYPE
    noUnificationVariablesInTypes maps noUnificationVariablesInType(list(*))

    declareLattice : scope * string * TYPE
    declareType : scope * string * TYPE
    declareConstructor : scope * string * TYPE
    resolveTypeVariable : scope  * string -> TYPE
    resolveTypeVariables maps resolveTypeVariable(*, list(*)) = list(*)
    latticePartUnique : scope * string
    mandatoryLatticePartSpecified : scope * string * string
    mandatoryLatticePartsSpecified maps mandatoryLatticePartSpecified(*, *, list(*))

    latticeDefOk : scope * LatticeDef
    latticeDefsOk maps latticeDefOk(*, list(*))

    typeOfLatticeDef : scope * string * list(Var) * list(LatticePart) -> TYPE

    latticePartOk : scope * scope * TYPE * LatticePart
    latticePartsOk maps latticePartOk(*, *, *, list(*))

    typeDefOk : scope * TypeDef
    typeDefsOk maps typeDefOk(*, list(*))

    typeOfTypeDef : scope * string * list(Var) * list(ConsDef) -> TYPE

    consDefOk : scope * scope * ConsDef * TYPE
    consDefsOk maps consDefOk(*, *, list(*), *)

    typeOfTypeOrVar : scope * scope * TypeOrVar -> TYPE
    typesOfTypeOrVars maps typeOfTypeOrVar(*, *, list(*)) = list(*)

    typeOfLattice : scope * scope * Type -> TYPE
    typeOfLatticeUserType : scope * scope * string * list(TypeOrVar) -> TYPE

    typeOfType : scope * scope * Type -> TYPE
    typeOfUserType : scope * scope * string * list(TypeOrVar) -> TYPE

    typeOfTypeParameter : scope * string -> string
    typesOfTypeParameters maps typeOfTypeParameter(*, list(*)) = list(*)

    typeOfTypeOrLattice : scope * scope * Type -> TYPE
    
    typeOfTypeExpr : scope * scope * Type -> TYPE
    
    typeOfParam : scope * scope * scope * Param -> TYPE
    
    latticeValueType : TYPE -> TYPE
    
rules

  latticeValueType(INST(LATTICE(_, _, ty, _), _)) = ty.

  createInstTypeScope(parent, names, types) = inst :- 
    new inst,
    createInstTypeScopeInner(inst, names, types),
    inst -I-> parent.

  createInstTypeScopeInner(s, [], []).

  createInstTypeScopeInner(s, [X|Xs], [T|Ts]) :- 
    createInstTypeScopeInner(s, Xs, Ts),
    s -> TVariable{X} with occurrenceType T.

  isListSameType([]).
  isListSameType([_]).
  isListSameType([a, b | rest]) :-
    a == b,
    isListSameType([b | rest]).

  matchType(left, right) :-
    left == right | error $[The types [left] and [right] are not compatible.].

  freshUnificationVariable(_) = freshT.

  promoteType(s, TVAR(name), debugName, location) = actualType :-
    occurrenceType of TVariable{name} in s |-> [(_, (_, actualType))] | error $[The type parameter [name] of type [debugName] could not be resolved uniquely in [s].] @location.
  promoteType(s, TUPLE(types), debugName, location) = TUPLE(promoteTypes(s, types, debugName, location)).
  promoteType(s, LIST(t), debugName, location) = LIST(promoteType(s, t, debugName, location)).
  promoteType(s, MAP(k, v), debugName, location) = MAP(promoteType(s, k, debugName, location), promoteType(s, v, debugName, location)).
  promoteType(s, SET(t), debugName, location) = SET(promoteType(s, t, debugName, location)).
  promoteType(s, LATTICE(name, params, ty, ls), debugName, location) = LATTICE(name, params, promoteType(s, ty, debugName, location), ls).
  promoteType(s, INST(subType, params), debugName, location) = INST(promoteType(s, subType, debugName, location), promoteTypes(s, params, debugName, location)).
  promoteType(_, other, _, _) = other.

  instType(s, t@USERTYPE(_, params, _)) = INST(t, resolveTypeVariables(s, params)).
  instType(s, l@LATTICE(name, params, ty, ls)) = INST(LATTICE(name, params, instType(s, ty), ls), resolveTypeVariables(s, params)).
  instType(_, other) = other.

  noUnificationVariablesInType(TUPLE(ts)) :- noUnificationVariablesInTypes(ts).
  noUnificationVariablesInType(LIST(t)) :- noUnificationVariablesInType(t).
  noUnificationVariablesInType(MAP(k, v)) :- noUnificationVariablesInType(k), noUnificationVariablesInType(v).
  noUnificationVariablesInType(SET(t)) :- noUnificationVariablesInType(t).
  noUnificationVariablesInType(LATTICE(_, _, t, _)) :- noUnificationVariablesInType(t).
  noUnificationVariablesInType(CONSTRUCTOR(t, ts)) :- noUnificationVariablesInType(t), noUnificationVariablesInTypes(ts).
  noUnificationVariablesInType(FUNCTION(rT, _, pTs)) :- noUnificationVariablesInType(rT), noUnificationVariablesInTypes(pTs).
  noUnificationVariablesInType(PROPERTY(t)) :- noUnificationVariablesInType(t).
  noUnificationVariablesInType(INST(t, aTs)) :- noUnificationVariablesInType(t), noUnificationVariablesInTypes(aTs).
  noUnificationVariablesInType(_).

  declareLattice(s, name, type) :-
    s -> Lattice{name} with occurrenceType type,
    occurrenceType of Lattice{name} in s |-> [_] | error $[The lattice [name] is declared more than once.].

  declareType(s, name, type) :-
    s -> Type{name} with occurrenceType type,
    occurrenceType of Type{name} in s |-> [_] | error $[The type [name] is declared more than once.].

  declareConstructor(s, name, type) :-
    s -> Constructor{name} with occurrenceType type,
    occurrenceType of Constructor{name} in s |-> [_] | error $[The constructor [name] is declared more than once.].

  resolveTypeVariable(s, name) = T :-
    occurrenceType of TVariable{name} in s |-> [(_, (_, T))] | error $[Could not resolve type variable [name] uniquely.].

  latticePartUnique(latticeScope, latticePartDescription) :-
    latticeScope -> UNIQUE_PART{latticePartDescription},
    UNIQUE_PART{latticePartDescription} in latticeScope |-> [_] | error $[The lattice part [latticePartDescription] is specified more than once.].

  mandatoryLatticePartSpecified(latticeScope, latticeName, latticePartDescription) :-
    UNIQUE_PART{latticePartDescription} in latticeScope |-> [_|_] | error $[The lattice part [latticePartDescription] is not specified in lattice [latticeName].].

  latticeDefOk(moduleScope, ldef@LatticeDefNoParams(latticeName, kind, latticeParts)) :- {latticeDefType}
    @ldef.type := latticeDefType,
    latticeDefType == typeOfLatticeDef(moduleScope, latticeName, [], latticeParts).

  latticeDefOk(moduleScope, ldef@LatticeDefParams(latticeName, params, kind, latticeParts)) :- {latticeDefType}
    @ldef.type := latticeDefType,
    latticeDefType == typeOfLatticeDef(moduleScope, latticeName, params, latticeParts).

  typeOfLatticeDef(moduleScope, latticeName, typeParams, latticeParts) = latticeDefType :- {latticeScope latticeType Xs}
    @latticeName.ref := latticeName,
    @latticeName.type := latticeDefType,
    new latticeScope,
    declareLattice(moduleScope, latticeName, latticeDefType),
    Xs == typesOfTypeParameters(latticeScope, typeParams),
    latticeDefType == LATTICE(latticeName, Xs, latticeType, latticeScope),
    latticePartsOk(moduleScope, latticeScope, latticeType, latticeParts),
    mandatoryLatticePartsSpecified(latticeScope, latticeName, ["type", "lub", "bottom"]).

  latticePartOk(moduleScope, latticeScope, latticeType, LatticePartType(t)) :-
    latticeType == typeOfType(moduleScope, latticeScope, t),
    latticePartUnique(latticeScope, "type").

  latticePartOk(moduleScope, latticeScope, latticeType, Lub(p1, p2, e)) :- {lubScope}
    new lubScope,
    lubScope -P-> moduleScope,
    latticeType == typeOfParam(moduleScope, latticeScope, lubScope, p1),
    latticeType == typeOfParam(moduleScope, latticeScope, lubScope, p2),
    typeAssignableTo(typeOfExpr(moduleScope, lubScope, e), latticeType),
    latticePartUnique(latticeScope, "lub").

  typeOfParam(moduleScope, latticeScope, methodScope, TypedParam(n, t)) = T :-
    @n.ref := n,
    @n.type := T,
    methodScope -> Variable{n} with occurrenceType T,
    T == typeOfTypeOrLattice(moduleScope, latticeScope, t).

  typeOfParam(moduleScope, latticeScope, methodScope, Param(n)) = T :-
    @n.ref := n,
    @n.type := T,
    methodScope -> Variable{n} with occurrenceType T.

  latticePartOk(moduleScope, latticeScope, latticeType, Lub(Param(a), Param(b), e)) :- {lubScope}
    @a.ref := a, @a.type := latticeType, @b.ref := b, @b.type := latticeType,
    new lubScope,
    lubScope -P-> moduleScope,
    lubScope -> Variable{a} with occurrenceType latticeType,
    lubScope -> Variable{b} with occurrenceType latticeType,
    typeAssignableTo(typeOfExpr(moduleScope, lubScope, e), latticeType),
    latticePartUnique(latticeScope, "lub").

  latticePartOk(moduleScope, latticeScope, latticeType, Glb(a, b, e)) :- {glbScope}
    @a.ref := a, @a.type := latticeType, @b.ref := b, @b.type := latticeType,
    new glbScope,
    glbScope -P-> moduleScope,
    glbScope -> Variable{a} with occurrenceType latticeType,
    glbScope -> Variable{b} with occurrenceType latticeType,
    typeOfExpr(moduleScope, glbScope, e) == latticeType,
    latticePartUnique(latticeScope, "glb").

  latticePartOk(moduleScope, latticeScope, latticeType, Leq(a, b, e)) :- {leqScope}
    @a.ref := a, @a.type := latticeType, @b.ref := b, @b.type := latticeType,
    new leqScope,
    leqScope -P-> moduleScope,
    leqScope -> Variable{a} with occurrenceType latticeType,
    leqScope -> Variable{b} with occurrenceType latticeType,
    typeOfExpr(moduleScope, leqScope, e) == BOOL(),
    latticePartUnique(latticeScope, "leq").

  latticePartOk(moduleScope, latticeScope, latticeType, Geq(a, b, e)) :- {geqScope}
    @a.ref := a, @a.type := latticeType, @b.ref := b, @b.type := latticeType,
    new geqScope,
    geqScope -P-> moduleScope,
    geqScope -> Variable{a} with occurrenceType latticeType,
    geqScope -> Variable{b} with occurrenceType latticeType,
    typeOfExpr(moduleScope, geqScope, e) == BOOL(),
    latticePartUnique(latticeScope, "geq").

  latticePartOk(moduleScope, latticeScope, latticeType, NLeq(a, b, e)) :- {nleqScope}
    @a.ref := a, @a.type := latticeType, @b.ref := b, @b.type := latticeType,
    new nleqScope,
    nleqScope -P-> moduleScope,
    nleqScope -> Variable{a} with occurrenceType latticeType,
    nleqScope -> Variable{b} with occurrenceType latticeType,
    typeOfExpr(moduleScope, nleqScope, e) == BOOL(),
    latticePartUnique(latticeScope, "nleq").

  latticePartOk(moduleScope, latticeScope, latticeType, Top(top)) :-
    latticePartUnique(latticeScope, "top"),
    typeAssignableTo(typeOfExpr(moduleScope, moduleScope, top), latticeType).

  latticePartOk(moduleScope, latticeScope, latticeType, Bottom(bottom)) :-
    latticePartUnique(latticeScope, "bottom"),
    typeAssignableTo(typeOfExpr(moduleScope, moduleScope, bottom), latticeType).

  typeDefOk(moduleScope, tdef@TypeDefNoParams(name, _, consDefs)) :- {typeDefType}
    @tdef.type := typeDefType,
    typeDefType == typeOfTypeDef(moduleScope, name, [], consDefs).

  typeDefOk(moduleScope, tdef@TypeDefParams(name, params, _, consDefs)) :- {typeDefType}
    @tdef.type := typeDefType,
    typeDefType == typeOfTypeDef(moduleScope, name, params, consDefs).

  typeOfTypeDef(moduleScope, typeName, typeParams, consDefs) = typeDefType :- {typeScope Xs}
    @typeName.ref := typeName,
    @typeName.type := typeDefType,
    new typeScope,
    declareType(moduleScope, typeName, typeDefType),
    Xs == typesOfTypeParameters(typeScope, typeParams),
    typeScope -> BASE_TYPE{} with occurrenceScope typeScope,
    typeDefType == USERTYPE(typeName, Xs, typeScope),
    consDefsOk(moduleScope, typeScope, consDefs, typeDefType).

  consDefOk(moduleScope, typeScope, c@ConsDef(name, types), parent) :- {Types consDefType}
    @name.ref := name,
    @c.type := consDefType,
    @name.type := consDefType,
    Types == typesOfTypeOrVars(moduleScope, typeScope, types),
    consDefType == CONSTRUCTOR(parent, Types),
    declareConstructor(moduleScope, name, consDefType).

  typeOfTypeOrVar(moduleScope, typeScope, tv@TypeOrVarType(t)) = T@typeOfType(moduleScope, typeScope, t) :-
    @tv.type := T.
  typeOfTypeOrVar(moduleScope, typeScope, tv@TypeOrVarVar(name)) = resultType :- {name'}
    @name.ref := name',
    @name.type := resultType,
    @tv.ref := name',
    @tv.type := resultType,
    resultType == TVAR(name),
    TVariable{name} in typeScope |-> [(_, TVariable{name'})] | error $[The type variable [name] could not be resolved uniquely.].

  typeOfLattice(moduleScope, latticeScope, e@UserTypeNoParams(name)) = result :-
    @e.type := result,
    result == typeOfLatticeUserType(moduleScope, latticeScope, name, []).

  typeOfLattice(moduleScope, latticeScope, e@UserTypeParams(name, params)) = result :-
    @e.type := result,
    result == typeOfLatticeUserType(moduleScope, latticeScope, name, params).

  typeOfLattice(moduleScope, latticeScope, e@Map(key, value)) = result :- {kT vT Xs lName' tLattice lName instTScope innerType}
    @e.type := result,
    occurrenceType of Lattice{"Map"} in moduleScope |-> [(_, (Lattice{lName'}, tLattice@LATTICE(_, Xs, _, _)))] | error $[The lattice Map could not be resolved uniquely.],
    kT == typeOfTypeOrVar(moduleScope, latticeScope, key),
    vT == typeOfLattice(moduleScope, latticeScope, value),
    instTScope == createInstTypeScope(latticeScope, Xs, [kT, vT]),
    result == promoteType(instTScope, INST(tLattice, [kT, vT]), "Map", "Map").

  typeOfLattice(_, _, t) = UNKNOWN_T :-
    false | error $[The expression [t] is not a valid reference to a lattice.].

  typeOfLatticeUserType(moduleScope, latticeScope, name, params) = result :- {Xs Ts lName' tLattice lName instTScope}
    @name.ref := lName',
    @name.type := result,
    occurrenceType of Lattice{name} in moduleScope |-> [(_, (Lattice{lName'}, tLattice@LATTICE(_, Xs, _, _)))] | error $[The lattice [name] could not be resolved uniquely.],
    Ts == typesOfTypeOrVars(moduleScope, latticeScope, params),
    instTScope == createInstTypeScope(latticeScope, Xs, Ts),
    result == promoteType(instTScope, INST(tLattice, Ts), name, name).

  typeOfType(_, _, e@Name()) = NAME() :-
    @e.type := NAME().
  typeOfType(_, _, e@SimpleTypeTerm()) = TERM() :-
    @e.type := TERM().
  typeOfType(_, _, e@Index()) = INDEX() :-
    @e.type := INDEX().
  typeOfType(_, _, e@Int()) = INT() :-
    @e.type := INT().
  typeOfType(_, _, e@String()) = STRING() :-
    @e.type := STRING().
  typeOfType(_, _, e@Float()) = FLOAT() :-
    @e.type := FLOAT().
  typeOfType(_, _, e@Bool()) = BOOL() :-
    @e.type := BOOL().

  typeOfType(moduleScope, typeScope, e@UserTypeNoParams(name)) = result :-
    @e.type := result,
    result == typeOfUserType(moduleScope, typeScope, name, []).
  typeOfType(moduleScope, typeScope, e@UserTypeParams(name, params)) = result :-
    @e.type := result,
    result == typeOfUserType(moduleScope, typeScope, name, params).
  typeOfType(moduleScope, typeScope, e@TypeTuple(l, r)) = TUPLE([L, R]) :-
    @e.type := TUPLE([L, R]),
    L == typeOfTypeOrVar(moduleScope, typeScope, l),
    R == typeOfTypeOrVar(moduleScope, typeScope, r).
  typeOfType(moduleScope, typeScope, e@Map(k, v)) = MAP(K, V) :-
    @e.type := MAP(K, V),
    K == typeOfTypeOrVar(moduleScope, typeScope, k),
    V == typeOfLattice(moduleScope, typeScope, v).
  typeOfType(moduleScope, typeScope, e@Set(t)) = SET(T) :-
    @e.type := SET(T),
    T == typeOfTypeOrVar(moduleScope, typeScope, t).

  typeOfUserType(moduleScope, typeScope, name, params) = result :- {Xs Ts tName' tUsertype instTScope}
    @name.ref := tName',
    @name.type := result,
    occurrenceType of Type{name} in moduleScope |-> [(_, (Type{tName'}, tUsertype@USERTYPE(_, Xs, _)))] | error $[The type [name] could not be resolved uniquely.],
    Ts == typesOfTypeOrVars(moduleScope, typeScope, params),
    instTScope == createInstTypeScope(typeScope, Xs, Ts),
    result == promoteType(instTScope, INST(tUsertype, Ts), name, name).

  typeOfTypeParameter(typeScope, param) = param :-
    @param.ref := param,
    typeScope -> TVariable{param},
    TVariable{param} in typeScope |-> [(_, _)] | error $[The type parameter [param] is declared more than once.].
  
  typeOfTypeOrLattice(moduleScope, typeScope, s@Set(_)) = typeOfType(moduleScope, typeScope, s).
  typeOfTypeOrLattice(moduleScope, typeScope, m@Map(_, _)) = typeOfType(moduleScope, typeScope, m).

  typeOfTypeOrLattice(moduleScope, typeLatticeScope, UserTypeNoParams(name)) = typeOfTypeOrLattice(moduleScope, typeLatticeScope, UserTypeParams(name, [])).
  typeOfTypeOrLattice(moduleScope, typeLatticeScope, UserTypeParams(name, params)) = result :- {latticeOrUserType}
	query occurrenceType
	  filter P* I* and { dcl :- typeOrLattice(dcl, name) } 
	  in moduleScope |-> [(_, (_, latticeOrUserType))] | error $[Cannot uniquely resolve type/lattice],
	result == processTypeOrLattice(moduleScope, typeLatticeScope, name, params, latticeOrUserType).

  processTypeOrLattice: scope * scope * string * list(TypeOrVar) * TYPE -> TYPE
  processTypeOrLattice(moduleScope, typeScope, name, params, tUsertype@USERTYPE(_, Xs, _)) = result :- {Ts instTScope}
    Ts == typesOfTypeOrVars(moduleScope, typeScope, params),
    instTScope == createInstTypeScope(typeScope, Xs, Ts),
    result == promoteType(instTScope, INST(tUsertype, Ts), name, name).
    
  processTypeOrLattice(moduleScope, latticeScope, name, params, tLattice@LATTICE(_, Xs, _, _)) = result :- {Ts instTScope}
    Ts == typesOfTypeOrVars(moduleScope, latticeScope, params),
    instTScope == createInstTypeScope(latticeScope, Xs, Ts),
    result == promoteType(instTScope, INST(tLattice, Ts), name, name).
    

  typeOrLattice: occurrence * string
  typeOrLattice(Lattice{n}, n).
  typeOrLattice(Type{n}, n).
  
  typeOfTypeExpr(moduleScope, typeScope, s@Set(_)) = typeOfType(moduleScope, typeScope, s).
  typeOfTypeExpr(moduleScope, typeScope, m@Map(_, _)) = typeOfType(moduleScope, typeScope, m).
  typeOfTypeExpr(moduleScope, typeScope, UserTypeNoParams(name)) = typeOfTypeOrLattice(moduleScope, typeLatticeScope, UserTypeParams(name, [])).
  typeOfTypeExpr(moduleScope, typeScope, UserTypeParams(name, params)) = result :- {latticeOrUserType}
	query occurrenceType
	  filter P* I* and { dcl :- typeOrLattice(dcl, name) } 
	  in moduleScope |-> [(_, (_, latticeOrUserType))] | error $[Cannot uniquely resolve type/lattice],
	result == processTypeOrLattice(moduleScope, typeScope, name, params, latticeOrUserType).
  typeOfTypeExpr(moduleScope, typeScope, tv@TypeVar(name)) = resultType :- {name'}
    @name.ref := name',
    @name.type := resultType,
    @tv.ref := name',
    @tv.type := resultType,
    resultType == TVAR(name),
    TVariable{name} in typeScope |-> [(_, TVariable{name'})] | error $[The type variable [name] could not be resolved uniquely.].
  
    