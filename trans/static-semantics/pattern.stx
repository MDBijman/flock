module static-semantics/pattern

imports
  static-semantics/common
  static-semantics/expr
  static-semantics/property
  static-semantics/type

signature

  sorts
    Pattern
    Wildcard

  constructors

    PatternTerm : ConsName * list(Pattern) -> Pattern
    PatternTuple : Pattern * list(Pattern) -> Pattern
    PatternWildcard : Wildcard -> Pattern
    PatternVar : Var -> Pattern
    At : Var * Pattern -> Pattern
    PatternLiteral : Literal -> Pattern

    Wildcard : Wildcard

  constraints

    // Get the type of a pattern
    typeOfPattern : scope * Pattern -> TYPE
    typesOfPatterns maps typeOfPattern(*, list(*)) = list(*)

    typeOfPatternVar : scope * Pattern * list((path * (occurrence * TYPE))) -> TYPE

    // To correctly generate alias constraints, add this rule to any rule that binds names in a rule.
    patternAliasConstraint : scope * Pattern

    // Gets the names of this pattern
    patternNames : Pattern -> list(string)

rules

  typeOfPattern(s, PatternTerm(name, patterns)) = T@INST(constructorResultType, exTArgs) :- {name' constructorType constructorParamTypes patternTypes tName tParams tScope instScope promotedConstructorParamTypes}
    @name.ref := name',
    @name.type := CONSTRUCTOR(constructorResultType, promotedConstructorParamTypes),
    occurrenceType of Constructor{name} in s |-> [(_, (Constructor{name'}, constructorType))] | error $[Unable to resolve pattern term [name] uniquely.],
    CONSTRUCTOR(constructorResultType, constructorParamTypes) == constructorType,
    USERTYPE(tName, tParams, tScope) == constructorResultType,
    instScope == createInstTypeScope(tScope, tParams, exTArgs),
    promotedConstructorParamTypes == instTypes(instScope, promoteTypes(instScope, constructorParamTypes, tName, name)),
    patternTypes == typesOfPatterns(s, patterns),
    matchTypes(patternTypes, promotedConstructorParamTypes) | error "Analysis of nested patterns failed. Did you specify the correct number of arguments?".

  typeOfPattern(s, pt@PatternTuple(firstPattern, restPatterns)) = T@TUPLE([firstType | restTypes]) :-
    @pt.type := T,
    firstType == typeOfPattern(s, firstPattern),
    restTypes == typesOfPatterns(s, restPatterns).

  typeOfPattern(s, pv@PatternVar(name)) = varType :- {variableQueryResult}
    query occurrenceType
      filter P+ and { Variable{name'} :- name' == name }
      min $ < P and { _, _ :- true }
      in s |-> variableQueryResult,
    typeOfPatternVar(s, pv, variableQueryResult) == varType.

  typeOfPattern(s, a@At(name, pattern)) = patternType :-
    @name.ref := name,
    @name.type := patternType,
    patternAliasConstraint(s, a),
    patternType == typeOfPattern(s, pattern),
    s -> Variable{name} with occurrenceType patternType,
    occurrenceType of Variable{name} in s |-> [(_, (Variable{name}, _))] | error $[The variable [name] is declared more than once.].

  typeOfPattern(_, p@PatternLiteral(l@IntLiteral(_))) = T :-
    @p.type := T, @l.type := T, T == INT().
  typeOfPattern(_, p@PatternLiteral(l@StringLiteral(_))) = T :-
    @p.type := T, @l.type := T, T == STRING().
  typeOfPattern(_, p@PatternLiteral(l@TrueLiteral())) = T :-
    @p.type := T, @l.type := T, T == BOOL().
  typeOfPattern(_, p@PatternLiteral(l@FalseLiteral())) = T :-
    @p.type := T, @l.type := T, T == BOOL().
  typeOfPattern(_, p@PatternWildcard(w@Wildcard())) = freshT :-
    @p.type := freshT, @w.type := freshT.

  typeOfPatternVar(s, pv@PatternVar(name), []) = varType :- // the variable has not been declared before
    @name.ref := name,
    @name.type := varType,
    @pv.ref := name,
    @pv.type := varType,
    s -> Variable{name} with occurrenceType varType,
    occurrenceType of Variable{name} in s |-> [(_, (Variable{name}, varType))] | error $[The variable [name] is declared more than once.].

  typeOfPatternVar(s, pv@PatternVar(name), [(_, (Variable{name'}, varType))]) = varType :-
    @name.ref := name',
    @name.type := varType,
    @pv.ref := name',
    @pv.type := varType,
    try { false } | note $[The variable [name] is not declared here; it is being matched on. If you intended to introduce a new variable, please use a different name.].

  typeOfPatternVar(s, PatternVar(name), [_, _ | _]) = unknown_t :-
    false | error $[The variable [name] exists in a parent scope, but could not be resolved uniquely.].

  patternAliasConstraint(s, At(currentName, PatternVar(orthonym))) :-
    //try { false } | note $[(var) [currentName] is an alias for orthonym [orthonym].],
    s -> Variable{currentName} with occurrenceOrthonym orthonym.

  patternAliasConstraint(s, At(currentName, pattern@At(deeperName, _))) :- {queryResult orthonym}
    //try { false } | note $[(at) [currentName] is an alias for [deeperName], with orthynym [orthonym].],
    occurrenceOrthonym of Variable{deeperName} in s |-> queryResult,
    orthonym == determineOccurrenceOrthonym(queryResult, deeperName),
    s -> Variable{currentName} with occurrenceOrthonym orthonym.

  patternAliasConstraint(_, _).

  patternNames(PatternVar(name)) = [name].
  patternNames(At(name, pattern)) = [name | patternNames(pattern)].
  patternNames(_) = [].
