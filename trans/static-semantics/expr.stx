module static-semantics/expr

imports
  static-semantics/common
  static-semantics/pattern
  static-semantics/type

signature

  sorts
    CompPredicate
    Expr
    //ExprRef // SDF3 considers this an alias
    //FunRef // SDF3 considers this an alias
    Literal
    MapBinding
    MapCompExpr
    MapCompSource
    MatchArm
    Ref
    SetCompExpr
    SetCompMatchArm
    SetCompSource

  constructors
    ExprTerm : ConsName * list(Expr) -> Expr
    ExprExprRef : Ref -> Expr
    PropOrAppl : PropName * Var -> Expr
    ExprTuple : Expr * list(Expr) -> Expr
    ExprLiteral : Literal -> Expr
    ExprStart : Expr
    ExprEnd : Expr

    ExprType : Var -> Expr
    Appl : Ref * list(Expr) -> Expr
    If : Expr * Expr * Expr -> Expr

    Eq  : Expr * Expr -> Expr
    NEq : Expr * Expr -> Expr
    And : Expr * Expr -> Expr
    Or  : Expr * Expr -> Expr
    Not : Expr        -> Expr

    Lt  : Expr * Expr -> Expr
    Lte : Expr * Expr -> Expr
    Gt  : Expr * Expr -> Expr
    Gte : Expr * Expr -> Expr

    Add : Expr * Expr -> Expr
    Sub : Expr * Expr -> Expr
    Mul : Expr * Expr -> Expr
    Div : Expr * Expr -> Expr
    Mod : Expr * Expr -> Expr
    Neg : Expr        -> Expr

    Match : Expr * list(MatchArm) -> Expr

    SetLiteral : list(Expr) -> Expr
    SetComp : Expr * list(SetCompExpr) -> Expr
    MapLiteral : list(MapBinding) -> Expr
    MapComp : MapBinding * list(MapCompExpr) -> Expr
    MapLookup : Expr * Expr -> Expr
    EmptySetOrMapLiteral : Expr

    SetCompExprSource : SetCompSource -> SetCompExpr
    SetCompExprPredicate : CompPredicate -> SetCompExpr
    MapCompExprSource : MapCompSource -> MapCompExpr
    MapCompExprPredicate : CompPredicate -> MapCompExpr
    Predicate : Expr -> CompPredicate
    MatchPredicate : Expr * list(SetCompMatchArm) -> CompPredicate
    SetSource : Pattern * Expr -> SetCompSource
    MapSource : Pattern * Pattern * Expr -> MapCompSource
    MapBinding : Expr * Expr -> MapBinding

    TermIndex : Var -> Expr

    SetUnion        : Expr * Expr -> Expr
    SetDifference   : Expr * Expr -> Expr
    SetContains     : Expr * Expr -> Expr
    SetIntersection : Expr * Expr -> Expr

    MatchArm : Pattern * Expr -> MatchArm
    SetCompMatchArmMatchArm : Pattern -> SetCompMatchArm

    IntLiteral : Int -> Literal
    StringLiteral : String -> Literal
    TrueLiteral : Literal
    FalseLiteral : Literal

    QualRef : ModuleName * Var -> Ref
    Ref : Var -> Ref

    //ExprRef : Ref -> ExprRef
    TopOf : Type -> Ref
    BottomOf : Type -> Ref

    LubOf  : Type -> Ref
    GlbOf  : Type -> Ref
    LeqOf  : Type -> Ref
    GeqOf  : Type -> Ref
    NLeqOf : Type -> Ref
    FunRef : Ref -> Ref

  constraints
    typesEquatable : TYPE * TYPE
    typeListsEquatable maps typesEquatable(list(*), list(*))
    typesComparable : TYPE * TYPE
    typeIsNumeric : TYPE
    typeOfArithmeticTypes : TYPE * TYPE -> TYPE
    typeOfArithmeticOrConcatTypes : TYPE * TYPE -> TYPE
    typeAssignableTo : TYPE * TYPE
    typesAssignableTo maps typeAssignableTo(list(*), list(*))

    typeOfExpr : scope * Expr -> TYPE
    typesOfExprs maps typeOfExpr(*, list(*)) = list(*)
    
    funTypeOf : scope * Ref -> TYPE

    typeOfPropOrAppl : scope * string * string * list((path * (occurrence * TYPE))) -> TYPE

    typeOfMatchArm : scope * MatchArm * TYPE -> TYPE
    typesOfMatchArms maps typeOfMatchArm(*, list(*), *) = list(*)

    setCompExprOk : scope * SetCompExpr
    setCompExprsOk maps setCompExprOk(*, list(*))

    compPredicateOk : scope * CompPredicate
    
    assertSetOrMap : TYPE

rules

  typesEquatable(INT(), FLOAT()).
  typesEquatable(FLOAT(), INT()).
  typesEquatable(STRING(), NAME()).
  typesEquatable(NAME(), STRING()).
  typesEquatable(a, b) :- a == b | error $[The types [a] and [b] are not equatable.].

  typesComparable(INT(), INT()).
  typesComparable(FLOAT(), FLOAT()).
  typesComparable(INT(), FLOAT()).
  typesComparable(FLOAT(), INT()).

  typeOfArithmeticTypes(INT(), INT()) = INT().
  typeOfArithmeticTypes(FLOAT(), FLOAT()) = FLOAT().
  typeOfArithmeticTypes(FLOAT(), INT()) = FLOAT().
  typeOfArithmeticTypes(INT(), FLOAT()) = FLOAT().

  typeOfArithmeticOrConcatTypes(INT(), STRING()) = STRING().
  typeOfArithmeticOrConcatTypes(STRING(), INT()) = STRING().
  typeOfArithmeticOrConcatTypes(FLOAT(), STRING()) = STRING().
  typeOfArithmeticOrConcatTypes(STRING(), FLOAT()) = STRING().
  typeOfArithmeticOrConcatTypes(STRING(), STRING()) = STRING().
  typeOfArithmeticOrConcatTypes(NAME(), NAME()) = NAME().
  typeOfArithmeticOrConcatTypes(a, b) = typeOfArithmeticTypes(a, b).

  typeIsNumeric(INT()).
  typeIsNumeric(FLOAT()).

  typeAssignableTo(INT(), FLOAT()).
  typeAssignableTo(STRING(), NAME()).
  typeAssignableTo(NAME(), STRING()).
  typeAssignableTo(a, b) :-
    a == b | error $[The type [a] cannot be assigned to type [b].].

  typeOfExpr(s, e@ExprTerm(consName, exprs)) = T@INST(constructorResultType, exTArgs) :- {consName' constructorType constructorParamTypes tName tParams tScope instScope promotedConstructorParamTypes exprTypes}
    @consName.ref := consName',
    @e.type := CONSTRUCTOR(T, promotedConstructorParamTypes),
    occurrenceType of Constructor{consName} in s |-> [(_, (Constructor{consName'}, constructorType))] | error $[Unable to resolve constructor [consName] uniquely.],
    CONSTRUCTOR(constructorResultType, constructorParamTypes) == constructorType,
    USERTYPE(tName, tParams, tScope) == constructorResultType,
    instScope == createInstTypeScope(new, tParams, exTArgs),
    promotedConstructorParamTypes == promoteTypes(instScope, constructorParamTypes, tName, consName),
    exprTypes == typesOfExprs(s, exprs),
    matchTypes(exprTypes, promotedConstructorParamTypes) | error "Analysis of nested expressions failed. Did you specify the correct number of arguments?".

  typeOfExpr(s, e@PropOrAppl(funName, arg)) = T :- {funQueryResult}
    @e.type := T,
    occurrenceType of Function{funName} in s |-> funQueryResult,
    T == typeOfPropOrAppl(s, funName, arg, funQueryResult).

  typeOfExpr(s, e@ExprTuple(first, rest)) = T@TUPLE([firstT | restTs]) :-
    @e.type := T,
    firstT == typeOfExpr(s, first),
    restTs == typesOfExprs(s, rest).

  typeOfExpr(s, e@Appl(fref, args)) = T :- {argTs typeParams paramTs instScope actualArgTs promotedConstructorParamTypes}
    @e.type := T,
    FUNCTION(T, typeParams, paramTs) == funTypeOf(s, fref),
    instScope == createInstTypeScope(new, typeParams, actualArgTs),
    promotedConstructorParamTypes == promoteTypes(instScope, paramTs, "Function application", "unknown location"),
    argTs == typesOfExprs(s, args),
    typesAssignableTo(argTs, promotedConstructorParamTypes) | error "An unexpected number of arguments was provided.".

  typeOfExpr(s, expr@If(c, t, e)) = T :- {cT tT eT}
    @expr.type := T,
    matchType(tT, T) | error $[The type [tT] cannot be assigned to type [T].],
    cT == BOOL() | error $[The condition of the if-statement has type [cT], which is not boolean.],
    cT == typeOfExpr(s, c),
    tT == typeOfExpr(s, t),
    eT == typeOfExpr(s, e),
    tT == eT | error $[The branches of the if-statement do not have the same type (left: [tT]; right: [eT]).].

  typeOfExpr(s, e@Eq(l, r)) = BOOL() :-
    @e.type := BOOL(), typesEquatable(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@NEq(l, r)) = BOOL() :-
    @e.type := BOOL(), typesEquatable(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@And(l, r)) = BOOL() :-
    @e.type := BOOL(), typeOfExpr(s, l) == BOOL(), typeOfExpr(s, r) == BOOL().

  typeOfExpr(s, e@Or(l, r)) = BOOL() :-
    @e.type := BOOL(), typeOfExpr(s, l) == BOOL(), typeOfExpr(s, r) == BOOL().

  typeOfExpr(s, n@Not(e)) = BOOL() :-
    @e.type := BOOL(), typeOfExpr(s, e) == BOOL().

  typeOfExpr(s, e@Lt(l, r)) = BOOL() :-
    @e.type := BOOL(), typesComparable(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@Lte(l, r)) = BOOL() :-
    @e.type := BOOL(), typesComparable(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@Gt(l, r)) = BOOL() :-
    @e.type := BOOL(), typesComparable(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@Gte(l, r)) = BOOL() :-
    @e.type := BOOL(), typesComparable(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@Add(l, r)) = T :-
    @e.type := T, T == typeOfArithmeticOrConcatTypes(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@Sub(l, r)) = T :-
    @e.type := T, T == typeOfArithmeticTypes(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@Mul(l, r)) = T :-
    @e.type := T, T == typeOfArithmeticTypes(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@Div(l, r)) = T :-
    @e.type := T, T == typeOfArithmeticTypes(typeOfExpr(s, l), typeOfExpr(s, r)).

  typeOfExpr(s, e@Mod(l, r)) = INT() :-
    @e.type := INT(), typeOfExpr(s, l) == INT(), typeOfExpr(s, r) == INT().

  typeOfExpr(s, n@Neg(e)) = T :-
    @n.type := T, T == typeOfExpr(s, e), typeIsNumeric(T).

  typeOfExpr(s, e@Match(scrutinee, arms)) = T :- {scrutineeType armTs}
    @e.type := T,
    [T | _] == armTs,
    scrutineeType == typeOfExpr(s, scrutinee),
    armTs == typesOfMatchArms(s, arms, scrutineeType),
    isListSameType(armTs) | error "All arms of a match expression must have the same type.".

  typeOfExpr(s, e@SetLiteral(items)) = T@SET(setType) :-
    @e.type := T,
    _ == typesOfExprs(s, items).

  typeOfExpr(s, e@SetComp(result, setCompExprs)) = T@SET(setType) :- {setCompScope}
    @e.type := T,
    new setCompScope, setCompScope -P-> s,
    setCompExprsOk(setCompScope, setCompExprs),
    T == SET(typeOfExpr(setCompScope, result)). // because this is a set comprehension

  typeOfExpr(s, e@EmptySetOrMapLiteral()) = unknown_t :-
    @e.type := unknown_t,
    assertSetOrMap(unknown_t).

  typeOfExpr(s, e@SetUnion(l, r)) = T :- {lT rT}
    @e.type := T, T == lT,
    lT == typeOfExpr(s, l), rT == typeOfExpr(s, r), lT == rT.

  typeOfExpr(_, e@ExprLiteral(l@IntLiteral(v))) = INT() :-
    @e.type := INT(), @l.type := INT(), @v.type := INT().
  typeOfExpr(_, e@ExprLiteral(l@StringLiteral(v))) = STRING() :-
    @e.type := STRING(), @l.type := STRING(), @v.type := STRING().
  typeOfExpr(_, e@ExprLiteral(l@TrueLiteral())) = BOOL() :-
    @e.type := BOOL(), @l.type := BOOL().
  typeOfExpr(_, e@ExprLiteral(l@FalseLiteral())) = BOOL() :-
    @e.type := BOOL(), @l.type := BOOL().

  typeOfExpr(s, e@ExprExprRef(r@Ref(name))) = T :- {name'}
    @name.ref := name',
    @e.type := T, @r.type := T, @name.type := T,
    occurrenceType of Variable{name} in s |-> [(_, (Variable{name'}, T))] | error $[The variable [name] could not be resolved uniquely.].
    
  typeOfExpr(s, e@ExprExprRef(t@TopOf(lattice))) = T :-
    @e.type := T, @t.type := T,
    INST(LATTICE(_, _, T, _), _) == typeOfLattice(s, s, lattice).
    
  typeOfExpr(s, e@ExprExprRef(t@BottomOf(lattice))) = T :-
    @e.type := T, @t.type := T,
    INST(LATTICE(_, _, T, _), _) == typeOfType(s, s, lattice).

  typeOfExpr(_, e) = UNKNOWN_T :-
    try { false } | warning $[Type checking of expression [e] has not been implemented yet.].
    
  funTypeOf(s, Ref(funName)) = T :- {funName'}
    @funName.ref := funName', @funName.type := T,
    occurrenceType of Function{funName} in s |-> [(_, (Function{funName'}, T))] | error $[Could not resolve function [funName] uniquely.].
    
  funTypeOf(s, e@LubOf(lattice)) = T :- {latticeTypeType}
    @e.type := T,
    INST(LATTICE(_, _, latticeTypeType, _), _) == typeOfLattice(s, s, lattice),
    T == FUNCTION(latticeTypeType, [], [latticeTypeType, latticeTypeType]).
    
  funTypeOf(s, e@GlbOf(lattice)) = T :- {latticeTypeType}
    @e.type := T,
    INST(LATTICE(_, _, latticeTypeType, _), _) == typeOfLattice(s, s, lattice),
    T == FUNCTION(latticeTypeType, [], [latticeTypeType, latticeTypeType]).
    
  funTypeOf(s, e@LeqOf(lattice)) = T :- {latticeTypeType}
    @e.type := T,
    INST(LATTICE(_, _, latticeTypeType, _), _) == typeOfLattice(s, s, lattice),
    T == FUNCTION(latticeTypeType, [], [latticeTypeType, latticeTypeType]).
    
  funTypeOf(s, e@GeqOf(lattice)) = T :- {latticeTypeType}
    @e.type := T,
    INST(LATTICE(_, _, latticeTypeType, _), _) == typeOfLattice(s, s, lattice),
    T == FUNCTION(latticeTypeType, [], [latticeTypeType, latticeTypeType]).

  funTypeOf(s, e@NLeqOf(lattice)) = T :- {latticeTypeType}
    @e.type := T,
    INST(LATTICE(_, _, latticeTypeType, _), _) == typeOfLattice(s, s, lattice),
    T == FUNCTION(latticeTypeType, [], [latticeTypeType, latticeTypeType]).

  typeOfPropOrAppl(s, funName, argName, [(_, (Function{funName'}, funT))]) = returnT :- {argName' argT typeParams paramTs instScope actualArgTs promotedConstructorParamTypes}
    @funName.ref := funName',
    @funName.type := funT,
    @argName.ref := argName',
    @argName.type := argT,
    funT == FUNCTION(returnT, typeParams, paramTs),
    instScope == createInstTypeScope(new, typeParams, actualArgTs),
    promotedConstructorParamTypes == promoteTypes(instScope, paramTs, "Function application", "unknown location"),
    occurrenceType of Variable{argName} in s |-> [(_, (Variable{argName'}, argT))] | error $[The variable [argName] could not be resolved uniquely.],
    typesAssignableTo([argT], promotedConstructorParamTypes).

  typeOfPropOrAppl(s, propName, argName, _) = promotedLType :- {propName' propT argName' argT instScope lattice lName lTParams lType lScope lTArgs}
    @propName.ref := propName',
    @propName.type := propT,
    @argName.ref := argName',
    @argName.type := argT,
    occurrenceType of Property{propName} in s |-> [(_, (Property{propName'}, propT@PROPERTY(lattice)))] | error $[The identifier [propName] could not be resolved to a function or property uniquely.],
    INST(LATTICE(lName, lTParams, lType, lScope), lTArgs) == lattice,
    instScope == createInstTypeScope(lScope, lTParams, lTArgs),
    promotedLType == promoteType(instScope, lType, lName, propName),
    occurrenceType of Variable{argName} in s |-> [(_, (Variable{argName'}, argT))] | error $[The variable [argName] could not be resolved uniquely.],
    typeAssignableTo(argT, promotedLType).

  typeOfMatchArm(s, m@MatchArm(pattern, expr), scrutineeType) = T :- {armScope}
    @m.type := T,
    new armScope,
    armScope -P-> s,
    scrutineeType == typeOfPattern(armScope, pattern),
    T == typeOfExpr(armScope, expr).

  setCompExprOk(s, SetCompExprSource(SetSource(pattern, expr))) :- {exprT setT}
    exprT == typeOfExpr(s, expr),
    exprT == SET(setT), // because this is a source for a set comprehension
    typeOfPattern(s, pattern) == setT.

  setCompExprOk(s, SetCompExprPredicate(predicate)) :- compPredicateOk(s, predicate).

  compPredicateOk(s, Predicate(expr)) :-
    typeOfExpr(s, expr) == BOOL().

  compPredicateOk(s, MatchPredicate(expr, matchArms)) :- {exprT}
    exprT == typeOfExpr(s, expr),
    try { false } | warning "Match predicates are not yet typechecked.".
    
  assertSetOrMap(SET(_)).
  assertSetOrMap(MAP(_, _)).
  assertSetOrMap(x) :-
    false | error $[The expected type is [x], which is not a set or map.].
