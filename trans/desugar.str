module desugar

imports

signatures/flock/-
signatures/flock/desugar/-
libspoofax/term/origin
libspoofax/stratego/debug

rules

  post-desugar-all = topdown(try(post-desugar-one))

  post-desugar-one = origin-track-forced(desugar-chains + desugar-setcomp + /*desugar-mapbinding +*/ desugar-mapcomp + desugar-compmatcharm)

  pre-desugar-all = topdown(try(pre-desugar-one))
  pre-desugar-one = origin-track-forced(desugar-chain + desugar-cfgrule + desugar-usertype + desugar-typedef + desugar-fundef + desugar-latticedef + alt-syntax)

  desugar-all = pre-desugar-all;post-desugar-all

  desugar-in-list(s): subj@[_|_] -> <origin-track-forced(!obj)> subj
  where if map(not(s))
        then fail
        else mapconcat(origin-track-forced(s <+ ![<id>]))
      end//if
    ; ?obj

rules // FlowSpec specific
	
  desugar-setcomp: SetComp(expr, exprs) -> SetComp(expr, sourcepatterns, sources', exprs')
  with (sources, exprs') := <partition(?SetSource(_, _))> exprs
   ; (sourcepatterns, sources') := <unzip(\SetSource(a,b) -> (a,b)\)> sources

//desugar-mapbinding: MapBinding(e1, e2) -> ExprTuple(e1, [e2])

  desugar-mapcomp: MapComp(t, exprs) -> MapComp(t, sourcepatterns, sources', exprs')
  with (sources, exprs') := <partition(?MapSource(_, _, _))> exprs
   ; (sourcepatterns, sources') := <unzip(\MapSource(p1,p2,e) -> (ExprTuple(p1,[p2]),e)\)> sources

  desugar-compmatcharm: SetCompMatchArmMatchArm(pattern) -> pattern

  desugar-signature-op: SignatureOpDecl(name, SignatureConstOp(s)) -> SignatureOpDecl(name, SignatureArrowOp([], s))
  desugar-signature-op = id

  desugar-chain: Chain(head, tail) -> Chain([head | tail])

  desugar-chains: CFGRule(r, a, chains) -> CFGRule(r, a, <map(explode-chain);concat> chains)
  explode-chain: Chain(l) -> <explode-chain-internal> l
  explode-chain-internal: [h1, h2] -> [Chain([h1, h2])]
  explode-chain-internal: [h1,h2|t] -> [Chain([h1, h2]) | <explode-chain-internal> [h2|t]]

  desugar-cfgrule: CFGRuleNoParams(root, pattern) -> CFGRuleParams(root, pattern, [])

  desugar-usertype: UserTypeNoParams(name) -> UserTypeParams(name, [])

  desugar-typedef: TypeDefNoParams(n, k, c*) -> TypeDefParams(n, [], k, c*)

  desugar-fundef: FunDefNoParams(n, a, e) -> FunDefParams(n, [], a, e)

  desugar-latticedef: LatticeDefNoParams(n, k, b) -> LatticeDefParams(n, [], k, b)

  alt-syntax: Module(name, sections) -> Module(name, imports, definitions)
  with imports := <extract-imports> sections
   ; definitions := <extract-definitions> sections

  extract-imports = 
  retain-all(\Imports(i,e) -> 
    <conc> ( <map(!Import(<id>))> i
           , <mapconcat(\ImportExternals(i) -> <map(!ExtImport(<id>))> i\)> e
           )\)
  ; concat

  extract-definitions =
    remove-all(?Imports(_,_))
  ; mapconcat( ?CFGRules(<id>)
           + \Signatures(s) -> <concat> <map(extract-signatures)> s\
           + ?LatticeDefs(<id>)
           + ?TypeDefs(<id>)
           + \PropDefs(d, e) -> <conc> (d, <mapconcat(\PropDefExternals(e) -> <map(\PropDef(n,t) -> ExtPropDef(n,t)\)> e\)> e)\
           + \PropRules(r) -> r\
           + ?FunDefs(<id>)
           )
           
  extract-signatures: SignatureSorts(s) -> s
  extract-signatures: SignatureConstructors(c) -> <map(desugar-signature-op)> c

  alt-syntax: CFGRule(r, p, c*) -> CFGRule(r, p', c'*)
  where this := <extract-this-name> p
    ; p' := At(this, <topdown(try(origin-track-forced(alt-syntax(|this))))> p)
    ; c'* := <topdown(try(origin-track-forced(alt-syntax(|this))))> c*
  alt-syntax: CFGNode(p) -> CFGRule(NoRoot(), At(this, p), [Chain([Entry(), Ref(this), Exit()])])
  where this := <extract-this-name> p
  alt-syntax(|this): This() -> Ref(this)
  alt-syntax(|this): SubCFG(r) -> Recurse(r)
  alt-syntax(|this): Node(r) -> Ref(r)

  extract-this-name = origin-track-forced(!$[_[<extract-this-name_>]])

  extract-this-name_: ExprTerm(name, _) -> <lower-case> name
  extract-this-name_: ExprTuple(_, l) -> $[tuple[<length;inc> l]]
  extract-this-name_: Wildcard() -> "wld"
  extract-this-name_: PatternVar(v) -> v
  extract-this-name_: TypeVar(v) -> v
  extract-this-name_: PatternTerm(n, _) -> n
  extract-this-name_: At(_,p) -> <extract-this-name> p
  extract-this-name_: IntLiteral(i) -> $[int[i]]
  extract-this-name_: StringLiteral(_) -> $[string]