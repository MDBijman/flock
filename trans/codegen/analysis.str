module codegen/analysis

imports
  codegen/util
  codegen/instances

rules

  analysis-class: analyses -> java:type-dec |[
	  public class Analysis {
		~*node-decls
		~*methods
	  }
	]|
  where
    node-decls := <mapconcat(node-decl)> analyses
  ; node-decl-inits := <mapconcat(node-decl-inits)> analyses
  ; remove-fact := <remove-facts> analyses
  ; updates* := <map(update-until-boundary)> analyses
  ; term-deps := <get-term-deps> analyses
  ; helpers* := <make-helpers; debug> analyses
  ; methods := [
	  java:classb-dec |[
		public Analysis() {
			~*node-decl-inits
		}
	  ]|,
      helpers*,
      updates*,
      term-deps,
      remove-fact
    ]
  
  node-decl: analysis -> java:classb-dec* |[
	public HashSet<Node> ~dirty-name;
	public HashSet<Node> ~new-name;
	public boolean ~is-forward;
	public boolean ~has-run = false;
  ]|
  where
    name := <analysis-name>
  ; dirty-name := $[dirty_[name]]
  ; new-name := $[new_[name]]
  ; is-forward := $[is_forward_[name]]
  ; has-run := $[has_run_[name]]
  
  node-decl-inits: analysis -> java:bstm* |[
    ~dirty-name = new HashSet<Node>();
    ~new-name = new HashSet<Node>();
    ~is-forward = ~forward;
  ]|
  where
    name := <analysis-name> analysis
  ; forward := <analysis-is-forward> analysis
  ; is-forward := $[is_forward_[name]]
  ; dirty-name := $[dirty_[name]]
  ; new-name := $[new_[name]]
  
  update-until-boundary: analysis -> java:method-dec |[
    public void ~method-name(Graph graph, Node node) {
		float boundary = graph.intervalOf(node);
		Set<Node> dirtyNodes = new HashSet<>(~dirty-set);
		
		for (Node n : ~dirty-set)
			dirtyNodes.addAll(getTermDependencies(graph, n));
		for (Node n : ~new-set)
			dirtyNodes.addAll(getTermDependencies(graph, n));

		if (!~has-run) {
			~analysis-init-call
			~has-run = true;
		} else {
			~analysis-call
		}
		~analysis-call

		~dirty-set.removeIf(n -> ~boundary-expr);
		~new-set.removeIf(n -> ~boundary-expr);
    }
  ]|
  where
    name := <analysis-name> analysis
  ; is-forward := <analysis-is-forward> analysis
  ; method-name := $[updateUntilBoundary_[name]]
  ; dirty-set := $[dirty_[name]]
  ; new-set := $[new_[name]]
  ; analysis-call := <update-analysis-call> name
  ; analysis-init-call := <init-analysis-call> name
  ; boundary-expr := <boundary-expression(||[graph.intervalOf(node)]|, java:expr |[boundary]|)> is-forward
  ; has-run:= $[has_run_[name]]
  
  boundary-expression(|lhs, rhs): |[ false ]| -> |[ ~lhs >= ~rhs ]|
  boundary-expression(|lhs, rhs): |[ true  ]| -> |[ ~lhs <= ~rhs ]|

  remove-facts: analyses -> java:method-dec |[
	public static boolean removeFact(Context context, Node current, CfgNodeId toRemove) {
		~*remove-fact-blocks	
		return ~remove-fact-res;
	}
  ]|
  where
    remove-fact-blocks := <mapconcat(analysis-name; remove-fact-block)> analyses
  ; remove-fact-res    := <remove-fact-result> ()
   
  get-term-deps: _ -> java:method-dec |[
	public static Set<Node> getTermDependencies(Graph g, Node n) {
		~bstm*:get-term-deps-block
		return r;
	}  
  ]|
  where get-term-deps-block := [
    java:bstm |[ Set<Node> r = new HashSet<>(); ]|
  | <term-dependencies-block>
  ]
  
  make-helpers: analyses -> java:classb-dec* |[
    public List<Set<Node>> getDirtySets() {
      
      ~*add-to-dirty-set
      return dirtySets;
    }
    
    public List<Set<Node>> getNewSets() {
      ~*add-to-new-set
      return newSets;
    }
      
  	public void addToDirty(Node n) {
		~*add-dirty-stmts
	}

	public void addToNew(Node n) {
		~*add-new-stmts
	}

	public void removeFromDirty(Set<Node> removedNodes) {
		~*remove-dirty-stmts
	}

	public void removeFromNew(Set<Node> removedNodes) {
		~*remove-new-stmts
	}
  ]|
  where
    add-to-dirty-set := [
      java:bstm |[ ArrayList<Set<Node>> dirtySets = new ArrayList<>(); ]|
    | <map(analysis-name; add-to-dirty-set)> analyses
    ]
  ; add-to-new-set := [
      java:bstm |[ ArrayList<Set<Node>> newSets = new ArrayList<>(); ]|
    | <map(analysis-name; add-to-new-set)> analyses
    ]
  ; add-dirty-stmts := <map(analysis-name; add-dirty)> analyses
  ; add-new-stmts   := <map(analysis-name; add-new)> analyses
  ; remove-dirty-stmts := <map(analysis-name; remove-dirty)> analyses
  ; remove-new-stmts   := <map(analysis-name; remove-new)> analyses
  
  add-to-dirty-set: a -> java:bstm |[ dirtySets.add(this.~name); ]| where name := $[dirty_[a]]
  add-to-new-set: a -> java:bstm |[ newSets.add(this.~name); ]| where name := $[new_[a]]
  add-dirty: a -> java:bstm |[ ~name.add(n); ]| where name := $[dirty_[a]]
  add-new:   a -> java:bstm |[ ~name.add(n); ]| where name := $[new_[a]]
  remove-dirty: a -> java:bstm |[ ~name.removeAll(removedNodes); ]| where name := $[dirty_[a]]
  remove-new:   a -> java:bstm |[ ~name.removeAll(removedNodes); ]| where name := $[new_[a]]
    