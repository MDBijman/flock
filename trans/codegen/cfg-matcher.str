module codegen/cfg-matcher

imports
  codegen/util
  codegen/nodes

  signatures/flock/-
  signatures/flock/desugar/-

  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules

  cfg-matcher-method-public: r -> result
  where
    cfg-rules := <filter(?(CFGRule(Root(), _, _)))> r
  ; switch := <cfg-matcher-switch-internal(empty-block)> cfg-rules
  ; result := java:method-dec |[
      public static Graph createCfg(IStrategoTerm term) {
		Graph result_graph = new Graph();
		for (IStrategoTerm subterm : term.getSubterms()) {
			Graph subgraph = createCfg(subterm);
			if (subgraph.size() != 0) {
				result_graph.mergeGraph(subgraph);
			}
		}
		
		~stm:switch
		
		return result_graph;
  	  }
    ]|
      
  cfg-matcher-method-internal: r -> java:method-dec |[
      private static Graph createCfg_inner(IStrategoTerm term) {
		Graph result_graph = new Graph();
	  	if (TermUtils.isList(term)) {
			IStrategoList list = M.list(term);
			if (list.isEmpty()) {
				return new Graph();
			}
			result_graph.mergeGraph(createCfg_inner(list.head()));
			list = list.tail();
			while (!list.isEmpty()) {
				Graph new_result = createCfg_inner(list.head());
				result_graph.attachChildGraph(result_graph.leaves, new_result);
				result_graph.leaves = new_result.leaves;
				list = list.tail();
			}
		} else ~else
		return result_graph;
  	  }
    ]| 
  where
    cfg-rules := <filter(?(CFGRule(NoRoot(), _, _)))> r
  ; else := <cfg-matcher-switch-internal(throw-exception)> cfg-rules
  
  empty-block: _ -> Block([])
  throw-exception: _ -> Block([Throw(NewInstance(None(), [], Id("RuntimeException"), [], None(), [Add(Add(StringLiteral("\"Could not create CFG node for term '\""), ExpressionName(Id("term"))), StringLiteral("\"'.\""))]))])
  
  cfg-matcher-switch-internal(make-default): [] -> <make-default>
  cfg-matcher-switch-internal(make-default): [CFGRule(_, pattern, body)|tail] -> IfElse(condition, then, else)
  where
    condition := <cfg-pattern-to-condition(|"term", [])> pattern
  ; then := <pattern-to-decls(|"term", [])> (pattern, body)
  ; else := <cfg-matcher-switch-internal(make-default)> tail

  
  cond-same: (l, r) -> Eq(l, r)
  cond-equals: (l, r) -> InvokeQExp(l, None(), Id("equals"), [r])
  cond-type-equals(|chain, rootterm): pattern -> <cond-equals> (<chain-to-getname(|rootterm)> chain, StringLiteral(<cfg-pattern-to-typename;to-string-literal> pattern))
  cond-arity-equals(|chain, rootterm): length -> <cond-same> (InvokeQExp(<chain-to-expression(|rootterm)> chain, None(), Id("getSubtermCount"), []), Deci(<int-to-string> length))
  chain-to-expression(|rootterm): [] -> ExpressionName(Id(rootterm))
  chain-to-expression(|rootterm): [h|t] -> <chain-to-expression(|rootterm);get-subterm(|h)> t
  chain-to-getname(|rootterm): chain -> InvokeQExp(<chain-to-expression(|rootterm);to-appl> chain, None(), Id("getName"), [])
  to-appl: expr -> InvokeQExp(ExpressionName(Id("M")), None(), Id("appl"), [expr])
  to-tuple: expr -> InvokeQExp(ExpressionName(Id("M")), None(), Id("tuple"), [expr])
  extract-string: expr -> InvokeQExp(ExpressionName(Id("M")), None(), Id("string"), [expr])
  extract-int: expr -> InvokeQExp(ExpressionName(Id("M")), None(), Id("integer"), [expr])
  
  cfg-pattern-to-condition(|rootterm, bindings) = cfg-pattern-to-condition-chain(|[], rootterm, bindings);condition-chain-to-lazy-and
  condition-chain-to-lazy-and: [] -> True()
  condition-chain-to-lazy-and: [h] -> h
  condition-chain-to-lazy-and: [h|t] -> LazyAnd(h, <condition-chain-to-lazy-and> t)
  
  chainmap(f|chain, rootterm, bindings) = number(id);map(chainmap-internal(f|chain, rootterm, bindings));concat
  chainmap-internal(f|chain, rootterm, bindings): (p, i) -> <f(|[i|chain], rootterm, bindings)> p
  
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PropPatternEnd(x) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PropPatternStart(x) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): Backward(x, _) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): Forward(_, x) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): At(_, x) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternVar(var) -> <var-equals-or-ignore(|chain, rootterm, var)> bindings
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternWildcard(_) -> []
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternLiteral(StringLiteral(x)) -> [<cond-equals> (<chain-to-expression(|rootterm);extract-string> chain, StringLiteral(x))]
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternLiteral(IntLiteral(x)) -> [<cond-same> (<chain-to-expression(|rootterm);extract-int> chain, Deci(x))]
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternTuple(head, tail) -> result
  where
    istuple := [InvokeQExp(ExpressionName(Id("TermUtils")), None(), Id("isTuple"), [<chain-to-expression(|rootterm)> chain])];
    argmatch := <chainmap(cfg-pattern-to-condition-chain|chain, rootterm, bindings)> [head|tail];
    result := <concat> [istuple, argmatch]
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): this@PatternTerm(name, args) -> result
  where
    length := <length> args;
    isappl := [InvokeQExp(ExpressionName(Id("TermUtils")), None(), Id("isAppl"), [<chain-to-expression(|rootterm)> chain])];
    typematch := [<cond-type-equals(|chain, rootterm)> this, <cond-arity-equals(|chain, rootterm)> length];
    argmatch := <chainmap(cfg-pattern-to-condition-chain|chain, rootterm, bindings)> args;
    result := <concat> [isappl, typematch, argmatch]
  
  var-equals-or-ignore(|chain, rootterm, var): [] -> []
  var-equals-or-ignore(|chain, rootterm, var): [var|_] -> [InvokeQExp(<chain-to-expression(|rootterm)> chain, None(), Id("equals"), [ExpressionName(Id(<to-term-name> var))])]
  var-equals-or-ignore(|chain, rootterm, var): [_|t] -> <var-equals-or-ignore(|chain, rootterm, var)> t
  
  
  /*
  * Builds the declarations that extract inner variables and aliases from the CFG rules
  */
  pattern-to-decls(|rootterm, bindings): (pattern, body) -> Block(<concat> [declarations, recursions, linking])
  with
    // Create local variable declarations for matched node and pattern variables
    declarations := <pattern-to-decls-internal(|[], rootterm, bindings)> pattern
  	// Recursively create cfg for children
  ; recursions   := <map(pattern-to-subgraphs(|pattern)); concat; uniq> body
  	// Link created cfgs
  ; linking      := <cfg-body-link> body
  pattern-to-decls(|rootterm, bindings) = pattern-to-decls-internal(|[], rootterm, bindings)
  pattern-to-decls-internal(|chain, rootterm, bindings): At(var, x) -> <concat> [
    <pattern-to-decls-internal(|chain, rootterm, bindings)> PatternVar(var),
    <pattern-to-decls-internal(|chain, rootterm, bindings)> x
  ]
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternWildcard(_) -> []
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternLiteral(_) -> []
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternTerm(_, args) -> <chainmap(pattern-to-decls-internal|chain, rootterm, bindings)> args
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternTuple(head, tail) -> <chainmap(pattern-to-decls-internal|chain, rootterm, bindings)> [head|tail]
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternVar(var) -> <var-set-or-ignore(|chain, rootterm, var)> bindings
  
  var-set-or-ignore(|chain, rootterm, var): [] -> [LocVarDeclStm(LocalVarDecl([], ClassType(Id("IStrategoTerm"), None()), [VariableDeclInit(VariableDecl(Id(<to-term-name> var)), <chain-to-expression(|rootterm)> chain)]))]
  var-set-or-ignore(|chain, rootterm, var): [var|_] -> []
  var-set-or-ignore(|chain, rootterm, var): [_|t] -> <var-set-or-ignore(|chain, rootterm, var)> t
  
  
  /*
  * Builds the recursive calls that build the sub-CFGs
  */
  pattern-to-subgraphs(|pattern) = pattern-to-subgraphs-internal(|<create-alias-map> pattern)
  pattern-to-subgraphs-internal(|aliases): Chain([l, r]) -> <concat> [
    <pattern-to-subgraphs-internal(|aliases)> l,
    <pattern-to-subgraphs-internal(|aliases)> r
  ]
  pattern-to-subgraphs-internal(|aliases): Ref(var) -> <lookup-with-default(refer-node,build-node)> (var, aliases)
  pattern-to-subgraphs-internal(|aliases): Recurse(var) -> <lookup-with-default(refer-rec,rec-node)> (var, aliases)
  pattern-to-subgraphs-internal(|aliases): Entry() -> []
  pattern-to-subgraphs-internal(|aliases): Exit() -> []
  pattern-to-subgraphs-internal(|aliases): CFGChainElementStart() -> []
  pattern-to-subgraphs-internal(|aliases): CFGChainElementEnd() -> []
  
  build-node: var -> java:bstm* |[
  	Graph x = new Graph(getTermNode(~t), ~t);
  ]|
  where 
    x := <to-build-node-name> var
  ; t := <to-term-name> var
  refer-node: (alias, var) -> <concat> [<build-node> var, [LocVarDeclStm(LocalVarDecl([], <node-type>, [VariableDeclInit(VariableDecl(Id(<to-build-node-name> alias)), ExpressionName(Id(<to-build-node-name> var)))]))]]
  rec-node: var -> java:bstm* |[ 
    Graph ~x = createCfg_inner(~rec);
  ]|
  where
    x := <to-rec-node-name> var
  ; rec  := <to-term-name> var
  refer-rec: (alias, var) -> <concat> [<rec-node> var, [LocVarDeclStm(LocalVarDecl([], <node-set-type>, [VariableDeclInit(VariableDecl(Id(<to-rec-node-name> alias)), ExpressionName(Id(<to-rec-node-name> var)))]))]]
  
  // Gather aliases in pattern match, these map to the same underlying stratego term
  // Example: a@b@Term(...) or Term(a@b)
  create-alias-map: PatternWildcard(_) -> []
  create-alias-map: PatternLiteral(_) -> []
  create-alias-map: PatternTerm(_, args) -> <map(create-alias-map);concat> args
  create-alias-map: PatternTuple(head, tail) -> <map(create-alias-map);concat> [head|tail]
  create-alias-map: PatternVar(_) -> []
  create-alias-map: At(alias, PatternVar(var)) -> [(alias, var)]
  create-alias-map: At(alias, at@At(var, _)) -> [(alias, var)|<create-alias-map>at]
  create-alias-map: At(_, p) -> <create-alias-map> p
  
  get-bindings: PatternWildcard(_) -> []
  get-bindings: PatternLiteral(_) -> []
  get-bindings: PatternTerm(_, args) -> <map(get-bindings);concat> args
  get-bindings: PatternTuple(head, tail) -> <map(get-bindings);concat> [head|tail]
  get-bindings: PatternVar(var) -> [var]
  get-bindings: At(var, p) -> [var|<get-bindings> p]
  
  /*
  * Merges the sub-CFGs and builds the final result
  */
  cfg-body-link: chains -> <concat> [start-builds, inner-builds, reset-leaves, end-builds]
  with
    start-builds  := <retain-all(is-chain-start); map(cfg-body-link-internal); concat> chains
  ; inner-builds  := <retain-all(not(is-chain-start + is-chain-end)); map(cfg-body-link-internal); concat> chains
  ; reset-leaves  := [java:bstm |[ result_graph.leaves = new HashSet<>(); ]|] 
  ; end-builds    := <retain-all(is-chain-end); map(cfg-body-link-internal); concat> chains
  cfg-body-link-internal: Chain([CFGChainElementStart(), r]) -> <cfg-body-add-to-result> r
  cfg-body-link-internal: Chain([Entry(), r]) -> <cfg-body-add-to-result> r

  cfg-body-link-internal: Chain([r, Exit()]) -> [java:bstm |[
    result_graph.leaves.addAll(x.leaves);
  ]|] where x := <to-graph-name> r
  cfg-body-link-internal: Chain([r, CFGChainElementEnd()]) -> [java:bstm |[
    result_graph.leaves.addAll(x.leaves);
  ]|] where x := <to-graph-name> r

  cfg-body-link-internal: Chain([a, b]) -> [java:bstm |[
    result_graph.attachChildGraph(~leaves, ~children);
  ]|]
  where
    children := <to-graph-name> b
  ; leaves := <to-graph-leaves-access> a
  cfg-body-link-internal: Chain([_, _]) -> []
  
  is-chain-start = ?Chain([Entry(), _]) + ?Chain([CFGChainElementStart(), _])
  is-chain-end = ?Chain([_, Exit()]) + ?Chain([_, CFGChainElementEnd()])
  
  // These are the heads of the created cfg
  cfg-body-add-to-result: Ref(var) -> [java:bstm |[ result_graph.mergeGraph(x); ]|] where x := <to-build-node-name> var
  cfg-body-add-to-result: Recurse(var) ->[java:bstm |[ result_graph.mergeGraph(x); ]|] where x := <to-rec-node-name> var

  cfg-pattern-to-typename: At(_, x) -> <cfg-pattern-to-typename> x
  cfg-pattern-to-typename: PatternTerm(name, _) -> name
  
  // Turn a pattern match into the java expression containing the result
  to-graph-name: r@Recurse(var) -> <extract-node-name> r
  to-graph-name: r@Ref(var) -> <extract-node-name> r
  to-graph-leaves-access: n -> java:expr|[x.leaves]| where x := <to-graph-name> n
  
  extract-node-name: Recurse(var) -> <to-rec-node-name> var
  extract-node-name: Ref(var) -> <to-build-node-name> var
  
  to-build-node-name = append-string(|"_nb")
  to-build-node-leaves-name = append-string(|"_nb_leaves")
  to-rec-node-name = append-string(|"_nr")
  to-rec-node-leaves-name = append-string(|"_nr_leaves")