module codegen/cfg-matcher

imports
  codegen/util
  codegen/nodes

  signatures/flock/-
  signatures/flock/desugar/-

  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules

  cfg-matcher-methods-from-roots: r -> [java:method-dec |[
  	public static Graph createCfgRecursive(TermTree tree, IStrategoTerm term) {
		return createCfgRecursive_inner(term).build(tree);
	}
  ]|,
  java:method-dec |[
  	public static Graph createCfgOnce(TermTree tree, IStrategoTerm term) {
		return createCfg_inner(term).build(tree);
	}
  ]|,
  java:method-dec |[
    public static GraphBuilder createCfgRecursive_inner(IStrategoTerm term) {
		GraphBuilder result_graph = GraphBuilder.empty();
		for (IStrategoTerm subterm : term.getSubterms()) {
			GraphBuilder subgraph = createCfgRecursive_inner(subterm);
			if (subgraph.hasRealNodes()) {
				result_graph.merge(subgraph);
			}
		}
		
		~stm:switch
		
		return result_graph;
  	  }
  ]|]
  where
    cfg-rules := <filter(?(CFGRule(Root(), _, _)))> r
  ; switch := <cfg-matcher-switch-internal(empty-block)> cfg-rules
  
  cfg-matcher-methods-from-nonroots: r -> [
  	java:method-dec |[
      private static GraphBuilder createCfg_inner(IStrategoTerm term) {
		GraphBuilder result_graph = GraphBuilder.empty();
	  	if (TermUtils.isList(term)) {
			IStrategoList list = M.list(term);
			if (list.isEmpty()) {
				return GraphBuilder.fallthrough();
			}

			TermId currentTail = result_graph.ENTRY;

			while (!list.isEmpty()) {
				GraphBuilder new_result = createCfg_inner(list.head());
				result_graph.merge(new_result);
				result_graph.connect(currentTail, new_result.ENTRY);
				currentTail = new_result.EXIT;
				list = list.tail();
			}

			result_graph.connect(currentTail, result_graph.EXIT);
		} else ~else
		return result_graph;
  	  }
    ]|]
  where
    cfg-rules := <filter(?(CFGRule(NoRoot(), _, _)))> r
  ; switch := <cfg-matcher-switch-internal(empty-block)> cfg-rules
  ; else := <cfg-matcher-switch-internal(throw-exception)> cfg-rules
  
  empty-block: _ -> Block([])
  throw-exception: _ -> Block([Throw(NewInstance(None(), [], Id("RuntimeException"), [], None(), [Add(Add(StringLiteral("\"Could not create CFG node for term '\""), ExpressionName(Id("term"))), StringLiteral("\"'.\""))]))])
  
  cfg-matcher-switch-internal(make-default): [] -> <make-default>
  cfg-matcher-switch-internal(make-default): [CFGRule(_, pattern, body)|tail] -> IfElse(condition, then, else)
  where
    condition := <cfg-pattern-to-condition(|"term", [])> pattern
  ; then := <pattern-to-decls(|"term", [])> (pattern, body)
  ; else := <cfg-matcher-switch-internal(make-default)> tail

  cond-same:   (l, r)  -> java:expr |[ ~l == ~r ]|
  cond-equals: (l, r)  -> java:expr |[ ~l.equals(~r) ]|
  cond-type-equals(|chain, rootterm): pattern -> <cond-equals> (<chain-to-getname(|rootterm)> chain, StringLiteral(<cfg-pattern-to-typename;to-string-literal> pattern))
  cond-arity-equals(|chain, rootterm): length -> <cond-same> (InvokeQExp(<chain-to-expression(|rootterm)> chain, None(), Id("getSubtermCount"), []), Deci(<int-to-string> length))
  chain-to-expression(|rootterm): [] -> ExpressionName(Id(rootterm))
  chain-to-expression(|rootterm): [h|t] -> <chain-to-expression(|rootterm); get-subterm(|h)> t
  chain-to-getname(|rootterm): chain -> java:expr |[ e.getName() ]| where e := <chain-to-expression(|rootterm); to-appl> chain
  to-appl:        e -> java:expr |[ M.appl(e) ]|
  to-tuple:       e -> java:expr |[ M.tuple(e) ]|
  extract-string: e -> java:expr |[ M.string(e) ]|
  extract-int:    e -> java:expr |[ M.integer(e) ]|
  
  cfg-pattern-to-method: (PropRule(_, pat, _, _), idx) -> java:classb-dec |[
    private boolean ~method-name(Node node) {
      ~bstm*:bstmts
      return true;
    }
  ]|
  with
    (stmts, guards) := <cfg-pattern-to-guard(|[], "term")> pat
  ; bstmts := <concat> [
  	  [java:bstm |[ ITerm term = node.virtualTerm; ]|],
  	  guards,
      stmts
    ]
  ; method-name := $[matchPattern[<int-to-string> idx]]
  
  cfg-pattern-to-guard(|var-bindings, term-name): (pat, idx) -> <cfg-pattern-to-guard(|var-bindings, new-name)> pat with new-name := $[[term-name]_[<int-to-string> idx]]
    
  cfg-pattern-to-guard(|var-bindings, term-name): At(_, x)       -> <cfg-pattern-to-guard(|var-bindings, term-name)> x
  cfg-pattern-to-guard(|var-bindings, term-name): PatternVar(v) -> ([java:bstm |[ if(!(~expr)) { return false; } ]|]) where expr := <check-equality-if-bound(|v)> var-bindings
  cfg-pattern-to-guard(|var-bindings, term-name): PatternVar(v) -> ([], [])
  cfg-pattern-to-guard(|var-bindings, term-name): PatternLiteral(IntLiteral(x)) -> ([], [])
  cfg-pattern-to-guard(|var-bindings, term-name): PatternWildcard(_)            -> ([], [])
  cfg-pattern-to-guard(|var-bindings, term-name): Forward(_, x)       -> <cfg-pattern-to-guard(|var-bindings, term-name)> x
  cfg-pattern-to-guard(|var-bindings, term-name): Backward(x, _)      -> <cfg-pattern-to-guard(|var-bindings, term-name)> x
  cfg-pattern-to-guard(|var-bindings, term-name): PropPatternEnd(x)   -> <cfg-pattern-to-guard(|var-bindings, term-name)> x
  cfg-pattern-to-guard(|var-bindings, term-name): PropPatternStart(x) -> <cfg-pattern-to-guard(|var-bindings, term-name)> x
  cfg-pattern-to-guard(|var-bindings, term-name): this@PatternTerm(name, args) -> (stmts, guards)
  with
    length := <length; int-to-string> args
  ; name-lit := <to-string-literal> name
  ; appl-check := java:expr |[ ~term-name.isAppl() ]|
  ; name-check := java:expr |[ ((ApplTerm) ~term-name).getConstructor().equals(~name-lit) ]|
  ; len-check  := java:expr |[ ~term-name.childrenCount() == ~length ]|
  ; subpattern-results := <number(id); map(cfg-pattern-to-guard(|var-bindings, term-name))> args
  ; (sub-stmts, sub-guards) := <unzip; (flatten-list, flatten-list)> subpattern-results
  ; guards := [
  	  java:bstm |[ if(!(~appl-check && ~name-check && ~len-check)) { return false; } ]|
  	| <concat> [<length; range; map(make-declaration(|term-name))> args, sub-guards]
    ]
  ; stmts := sub-stmts
  
  make-declaration(|parent): idx -> java:bstm |[ ITerm ~child = ~parent.childAt(~idxs); ]|
  where
    idxs := <int-to-string> idx
  ; child := $[[parent]_[idx]]
  check-equality-if-bound(|var): bindings -> java:expr |[ to_be_implemented ]| where <elem> (var, bindings)
  
  
  cfg-pattern-to-condition(|rootterm, bindings) = cfg-pattern-to-condition-chain(|[], rootterm, bindings); condition-chain-to-lazy-and
  condition-chain-to-lazy-and: [] -> True()
  condition-chain-to-lazy-and: [h] -> h
  condition-chain-to-lazy-and: [h|t] -> LazyAnd(h, <condition-chain-to-lazy-and> t)
  
  chainmap(f|chain, rootterm, bindings) = number(id);map(chainmap-internal(f|chain, rootterm, bindings));concat
  chainmap-internal(f|chain, rootterm, bindings): (p, i) -> <f(|[i|chain], rootterm, bindings)> p
  
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PropPatternEnd(x) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PropPatternStart(x) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): Backward(x, _) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): Forward(_, x) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): At(_, x) -> <cfg-pattern-to-condition-chain(|chain, rootterm, bindings)> x
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternVar(var) -> <var-equals-or-ignore(|chain, rootterm, var)> bindings
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternWildcard(_) -> []
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternLiteral(StringLiteral(x)) -> [<cond-equals> (<chain-to-expression(|rootterm);extract-string> chain, StringLiteral(x))]
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternLiteral(IntLiteral(x)) -> [<cond-same> (<chain-to-expression(|rootterm);extract-int> chain, Deci(x))]
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): PatternTuple(head, tail) -> result
  where
    istuple := [InvokeQExp(ExpressionName(Id("TermUtils")), None(), Id("isTuple"), [<chain-to-expression(|rootterm)> chain])];
    argmatch := <chainmap(cfg-pattern-to-condition-chain|chain, rootterm, bindings)> [head|tail];
    result := <concat> [istuple, argmatch]
  cfg-pattern-to-condition-chain(|chain, rootterm, bindings): this@PatternTerm(name, args) -> result
  where
    length := <length> args;
    isappl := [InvokeQExp(ExpressionName(Id("TermUtils")), None(), Id("isAppl"), [<chain-to-expression(|rootterm)> chain])];
    typematch := [<cond-type-equals(|chain, rootterm)> this, <cond-arity-equals(|chain, rootterm)> length];
    argmatch := <chainmap(cfg-pattern-to-condition-chain|chain, rootterm, bindings)> args;
    result := <concat> [isappl, typematch, argmatch]
  
  var-equals-or-ignore(|chain, rootterm, var): [] -> []
  var-equals-or-ignore(|chain, rootterm, var): [var|_] -> [InvokeQExp(<chain-to-expression(|rootterm)> chain, None(), Id("equals"), [ExpressionName(Id(var))])]
  var-equals-or-ignore(|chain, rootterm, var): [_|t] -> <var-equals-or-ignore(|chain, rootterm, var)> t
  
  
  /*
  * Builds the declarations that extract inner variables and aliases from the CFG rules
  */
  pattern-to-decls(|rootterm, bindings): (pattern, body) -> Block(<concat> [declarations, recursions, linking, irregular])
  with
    // Create local variable declarations for matched node and pattern variables
    declarations := <pattern-to-decls-internal(|[], rootterm, bindings)> pattern
  	// Recursively create cfg for children
  ; recursions   := <map(pattern-to-subgraphs(|pattern)); concat; uniq> body
  	// Link created cfgs
  ; linking      := <cfg-body-link()> body
  ; irregular    := [<find-path(|Entry(), Exit()) < ![] + (find-path(|CFGChainElementStart(), CFGChainElementEnd()) < ![] + mark-irregular)> body]
  mark-irregular = !java:bstm |[ result_graph.markIrregular(Helpers.getTermId(term)); ]|
  
  pattern-to-decls(|rootterm, bindings) = pattern-to-decls-internal(|[], rootterm, bindings)
  pattern-to-decls-internal(|chain, rootterm, bindings): At(var, x) -> <concat> [
    <pattern-to-decls-internal(|chain, rootterm, bindings)> PatternVar(var),
    <pattern-to-decls-internal(|chain, rootterm, bindings)> x
  ]
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternWildcard(_) -> []
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternLiteral(_) -> []
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternTerm(_, args) -> <chainmap(pattern-to-decls-internal|chain, rootterm, bindings)> args
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternTuple(head, tail) -> <chainmap(pattern-to-decls-internal|chain, rootterm, bindings)> [head|tail]
  pattern-to-decls-internal(|chain, rootterm, bindings): PatternVar(var) -> <var-set-or-ignore(|chain, rootterm, var)> bindings
  
  var-set-or-ignore(|chain, rootterm, var): [] -> [java:bstm |[ IStrategoTerm ~var = ~expr; ]|] where expr := <chain-to-expression(|rootterm)> chain
  var-set-or-ignore(|chain, rootterm, var): [var|_] -> []
  var-set-or-ignore(|chain, rootterm, var): [_|t] -> <var-set-or-ignore(|chain, rootterm, var)> t
  
  /*
  * Builds the recursive calls that build the sub-CFGs
  */
  pattern-to-subgraphs(|pattern) = pattern-to-subgraphs-internal(|<create-alias-map> pattern)
  pattern-to-subgraphs-internal(|aliases): Chain([l, r]) -> <concat> [
    <pattern-to-subgraphs-internal(|aliases)> l,
    <pattern-to-subgraphs-internal(|aliases)> r
  ]
  pattern-to-subgraphs-internal(|aliases): Ref(var) -> <lookup-with-default(refer-node,build-node)> (var, aliases)
  pattern-to-subgraphs-internal(|aliases): Recurse(var) -> <lookup-with-default(refer-rec,rec-node)> (var, aliases)
  pattern-to-subgraphs-internal(|aliases): Entry() -> []
  pattern-to-subgraphs-internal(|aliases): Exit() -> []
  pattern-to-subgraphs-internal(|aliases): CFGChainElementStart() -> []
  pattern-to-subgraphs-internal(|aliases): CFGChainElementEnd() -> []
  
  build-node: var -> java:bstm* |[
  	GraphBuilder x = GraphBuilder.fromSingle(Helpers.getTermId(~var));
  ]|
  where 
    x := <to-build-node-name> var
  refer-node: (alias, var) -> <concat> [<build-node> var, [LocVarDeclStm(LocalVarDecl([], ClassType(Id("Node"), None()), [VariableDeclInit(VariableDecl(Id(<to-build-node-name> alias)), ExpressionName(Id(<to-build-node-name> var)))]))]]
  rec-node: var -> java:bstm* |[ 
    GraphBuilder x = createCfg_inner(~var);
  ]|
  where
    x := <to-rec-node-name> var
  refer-rec: (alias, var) -> <concat> [<rec-node> var, [LocVarDeclStm(LocalVarDecl([], <node-set-type>, [VariableDeclInit(VariableDecl(Id(<to-rec-node-name> alias)), ExpressionName(Id(<to-rec-node-name> var)))]))]]
  
  // Gather aliases in pattern match, these map to the same underlying stratego term
  // Example: a@b@Term(...) or Term(a@b)
  create-alias-map: PatternWildcard(_) -> []
  create-alias-map: PatternLiteral(_) -> []
  create-alias-map: PatternTerm(_, args) -> <map(create-alias-map);concat> args
  create-alias-map: PatternTuple(head, tail) -> <map(create-alias-map);concat> [head|tail]
  create-alias-map: PatternVar(_) -> []
  create-alias-map: At(alias, PatternVar(var)) -> [(alias, var)]
  create-alias-map: At(alias, at@At(var, _)) -> [(alias, var)|<create-alias-map>at]
  create-alias-map: At(_, p) -> <create-alias-map> p
  
  get-bindings: PatternWildcard(_) -> []
  get-bindings: PatternLiteral(_) -> []
  get-bindings: PatternTerm(_, args) -> <map(get-bindings);concat> args
  get-bindings: PatternTuple(head, tail) -> <map(get-bindings);concat> [head|tail]
  get-bindings: PatternVar(var) -> [var]
  get-bindings: At(var, p) -> [var|<get-bindings> p]
  
  /*
  * Merges the sub-CFGs and builds the final result
  */

  cfg-body-link(): Chain([Entry(), Exit()]) -> [java:bstm |[ result_graph = GraphBuilder.placeholder(); ]|]
  cfg-body-link(): chains -> <concat> [build-elements,link-elements]
  with
    elements := <map(extract-chain); flatten-list; uniq> chains
  ; build-elements := <map(build-chain-element); concat> elements
  ; link-elements := <map(link-chain-element); concat> chains
  extract-chain: Chain(e) -> e
  
  build-chain-element: Ref(var) -> [java:bstm |[ result_graph.merge(x); ]|] where x := <to-build-node-name> var
  build-chain-element: Recurse(var) ->[java:bstm |[ result_graph.merge(x); ]|] where x := <to-rec-node-name> var
  build-chain-element = ![]
  
  link-chain-element: Chain([Entry(), CFGChainElementEnd()]) -> [
    java:bstm |[ result_graph.connect(result_graph.ENTRY, result_graph.END); ]|
  ]
  
  link-chain-element: Chain([Entry(), r]) -> [java:bstm |[
    result_graph.connect(result_graph.ENTRY, x.ENTRY);
  ]|] where x := <to-graph-name> r 	
    
  link-chain-element: Chain([CFGChainElementStart(), r]) -> [java:bstm |[
    result_graph.connect(result_graph.START, x.ENTRY);
  ]|] where x := <to-graph-name> r 	
    
  link-chain-element: Chain([r, Exit()]) -> [java:bstm |[
    result_graph.connect(x.EXIT, result_graph.EXIT);
  ]|] where x := <to-graph-name> r 	
  
  link-chain-element: Chain([r, CFGChainElementEnd()]) -> [java:bstm |[
    result_graph.connect(x.EXIT, result_graph.END);
  ]|] where x := <to-graph-name> r

  link-chain-element: Chain([a, b]) -> [java:bstm |[
    result_graph.connect(~parents.EXIT, ~children.ENTRY);
  ]|]
  where
    parents := <to-graph-name> a
  ; children := <to-graph-name> b
  
  link-chain-element: c@Chain([Entry(), Exit()]) -> [java:bstm |[
      result_graph.connect(result_graph.ENTRY, result_graph.EXIT);
  ]|]
  
  link-chain-element: c@Chain([_, _]) -> <debug; fail> c
  
  cfg-pattern-to-typename: At(_, x) -> <cfg-pattern-to-typename> x
  cfg-pattern-to-typename: PatternTerm(name, _) -> name
  
  // Turn a pattern match into the java expression containing the result
  to-graph-name: r@Recurse(var) -> <extract-node-name> r
  to-graph-name: r@Ref(var) -> <extract-node-name> r
  
  extract-node-name: Recurse(var) -> <to-rec-node-name> var
  extract-node-name: Ref(var) -> <to-build-node-name> var
  
  to-build-node-name = append-string(|"_nb")
  to-build-node-leaves-name = append-string(|"_nb_leaves")
  to-rec-node-name = append-string(|"_nr")
  to-rec-node-leaves-name = append-string(|"_nr_leaves")
  
  /*
  * Finds a path from current to goal in a set of CFG rules
  * This is used to determine if there is an entry -> exit path
  */
  
  find-path(|current, goal): _ -> <eq> (current, goal)
  find-path(|current, goal): edges -> <id>
  where
    new-sources := <retain-all(match-chain-src(|current); get-chain-dst)> edges
  // Remove all chains that point to a new source, so we remove loops
  // And then try to find a path from the new source to exit
  ; new-edges := <remove-all(match-chain-src(|current))> edges
  ; <any-path(|new-sources, goal)> new-edges
  any-path(|sources, goal): edges -> <fetch(any-path-inner(|edges, goal))> sources
  any-path-inner(|edges, goal): src -> <find-path(|src, goal)> edges
  match-chain-src(|match-src): Chain([src, _]) -> <id> where <eq> (match-src, src)
  match-chain-dst(|match-dst): Chain([_, dst]) -> <id> where <eq> (match-dst, dst)
  get-chain-dst: Chain([_, dst]) -> dst
  get-chain-src: Chain([src, _]) -> src
  