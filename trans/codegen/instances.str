module instances

imports
  codegen/util

strategies

  analyses: _ -> [("live", |[false]|), ("values", |[true]|), ("alias", |[true]|)]

  analysis-name: (a, _) -> a
  analysis-is-forward: (_, a) -> a

  analysis-is-forward: "values" -> |[true]|
  analysis-is-forward: "live" -> |[false]|
  analysis-is-forward: "alias" -> |[true]|
  
  analysis-boundary-check(|n): e -> java:bstm |[ if (e < intervalBoundary) continue; ]| where <equal(|n)> "examples/LiveVariables"
  analysis-boundary-check(|n): e -> java:bstm |[ if (e > intervalBoundary) continue; ]| where <equal(|n)> "examples/ValueAnalysis"
  analysis-boundary-check(|n): e -> java:bstm |[ if (e > intervalBoundary) continue; ]| where <equal(|n)> "examples/PointsTo"
  analysis-default-boundary: "examples/LiveVariables" -> java:expr |[ -Float.MAX_VALUE ]|
  analysis-default-boundary: "examples/ValueAnalysis" -> java:expr |[ Float.MAX_VALUE ]|
  analysis-default-boundary: "examples/PointsTo" -> java:expr |[ Float.MAX_VALUE ]|
  
  update-analysis-call: "live" -> |[ LiveVariablesFlowAnalysis.updateDataAnalysis(graph, new_live, dirtyNodes, boundary); ]|
  init-analysis-call:   "live" -> |[ LiveVariablesFlowAnalysis.performDataAnalysis(graph, graph.roots(), new_live, dirtyNodes, boundary); ]|
  update-analysis-call: "values" -> |[ ValueFlowAnalysis.updateDataAnalysis(graph, new_values, dirtyNodes, boundary); ]|
  init-analysis-call:   "values" -> |[ ValueFlowAnalysis.performDataAnalysis(graph, graph.roots(), new_values, dirtyNodes, boundary); ]|
  update-analysis-call: "alias" -> |[ PointsToFlowAnalysis.updateDataAnalysis(graph, new_alias, dirtyNodes, boundary); ]|
  init-analysis-call:   "alias" -> |[ PointsToFlowAnalysis.performDataAnalysis(graph, graph.roots(), new_alias, dirtyNodes, boundary); ]|
  
  remove-fact-block: "live" -> java:bstm* |[
	boolean removedLiveness = false;
	if (current.getProperty(~name) != null) {
		Set<LivenessValue> lv = (Set<LivenessValue>) current.getProperty(~name).value;
		assert lv != null;
		removedLiveness = lv.removeIf(ll -> {
			return ll.origin.getId() == toRemove.getId();
		});			
	}
  ]|
  where name := <to-string-literal> "live"
  
  remove-fact-block: "values" -> java:bstm* |[
	boolean removedConst = false;
	if (current.getProperty(~name) != null) {
		HashMap<String, ValueValue> cv = (HashMap<String, ValueValue>) current.getProperty(~name).value;
		assert cv != null;

		 removedConst = cv.entrySet().removeIf(ll -> {
			return ll.getValue().origin.contains(toRemove);
		});
	}
  ]|
  where name := <to-string-literal> "values"

  remove-fact-block: "alias" -> java:bstm* |[
	if (current.getProperty(~name) != null) {}
  ]|
  where name := <to-string-literal> "alias"

  remove-fact-result: _ -> |[ removedLiveness || removedConst ]|

  term-dependencies-block: _ -> java:bstm* |[
	// Folding
	if (TermUtils.isAppl(g.termOf(n), ~int, 1)) {
		r.addAll(g.parentsOf(n));
	}
	
	// Propagation
	for (Node p : g.childrenOf(n)) {
		if (TermUtils.isAppl(g.termOf(p), ~assign, -1)) {
			r.add(p);
		}
	}  
  ]|
  where
    int := <to-string-literal> "Int"
  ; assign := <to-string-literal> "Assign"
  