module codegen/analysis-class

imports

  codegen/-

  signatures/flock/-
  signatures/flock/desugar/-
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

strategies

  module-to-analysis-java: Module(name, _, r) -> java:compilation-unit |[ 
  	  package org.spoofax;
  	  ~import-dec*:imports
  	  ~type-dec*:classes
    ]| 
  where
    imports := <all-imports>
  ; classes := <concat> [
      [<main-class(|r)> name],
      <lattice-classes(|r)>,
      <transfer-classes(|r)>,
      <user-functions-class(|r)>
    ]

  main-class(|r): module-name -> java:type-dec |[
	  public class FlowAnalysis extends Analysis {
	  	public FlowAnalysis() {
	  	  super(~prop-name, ~direction-enum);
	  	}
	  	
	  	@Override
		public void initNodeValue(Node node) {
		  ~bstm*:value-inits
		}
		
		@Override
	    public void initNodeTransferFunction(Node node) {
	      ~bstm:stmt
	    }

		~classb-dec*:pattern-match-methods
	  }
  ]| 
  with
    (name, direction) := <rules-to-analysis-term> r
  ; prop-name      := <to-string-literal> name
  ; direction-enum := <dir-to-java-enum> direction
  ; value-inits := <retain-all(?PropDef(_, UserTypeParams(_, _), _)); map(propdef-to-add)> r
  ; pattern-match-methods := <get-sorted-proprules; number(cfg-pattern-to-method)> r
  ; stmt := <node-factory-switch> r
 
  propdef-to-add: PropDef(n, UserTypeParams(tname, _), _) -> java:bstm |[
  	node.addProperty(~name, ~tname.bottom());
  ]| where name := <to-string-literal> n
                      
  lift-single: Block([stmt]) -> stmt
  lift-single: Block(s) -> <id>
  
  rules-to-analysis-term: r -> <getfirst(rule-to-prop-dir)> r
  rule-to-prop-dir: PropRule(name, Backward(_, _), _, _) -> (name, "backward")
  rule-to-prop-dir: PropRule(name, Forward(_, _), _, _) -> (name, "forward")
  
  dir-to-java-enum: "forward"  -> java:expr |[ Direction.FORWARD ]|
  dir-to-java-enum: "backward" -> java:expr |[ Direction.BACKWARD ]|
  
  get-name: PropRule(name, _, _, _) -> name
  
  to-new-name = append-string(|"_n")
  to-old-name = append-string(|"_o")
  
  analysis-name: (n, _) -> n
  analysis-direction: (_, d) -> d
  
  direction-to-is-forward-expr: "backward" -> |[ false ]|
  direction-to-is-forward-expr: "forward"  -> |[ true ]|
 
