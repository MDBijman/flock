module codegen/analysis-class

imports

  codegen/-

  signatures/flock/-
  signatures/flock/desugar/-
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

strategies

  module-to-analysis-java: Module(name, _, r) -> java:compilation-unit |[ 
  	  package org.spoofax;
  	  ~import-dec*:imports
  	  ~type-dec*:classes
    ]| 
  where
    imports := <all-imports>
  ; classes := <concat> [
      [<main-class(|r)> name],
      <lattice-classes(|r)>,
      <transfer-classes(|r)>,
      <user-functions-class(|r)>
    ]

  main-class(|r): module-name -> java:type-dec |[
	  public class FlowAnalysis extends Analysis {
	  	public FlowAnalysis() {
	  	  super(~prop-name, ~direction-enum);
	  	}
	  	
		public static void initNodeValue(Node node) {
		  ~bstm*:value-inits
		}
		  
	    public static void initNodeTransferFunction(Node node) {
	      ~bstm:stmt
	    }
		      
		@Override
		public void performDataAnalysis(Graph g, Collection<Node> roots, Collection<Node> nodeset, Collection<Node> dirty, float intervalBoundary) {
			Queue<Node> worklist = new LinkedBlockingQueue<>();
			HashSet<Node> inWorklist = new HashSet<>();
			for (Node node : nodeset) {
				~boundary-check-node
				worklist.add(node);
				inWorklist.add(node);
				initNodeValue(node);
				initNodeTransferFunction(node);
			}
			for (Node node : dirty) {
				~boundary-check-node
				worklist.add(node);
				inWorklist.add(node);
				initNodeTransferFunction(node);
			}
		 	for (Node root : roots) {
		 		~boundary-check-root
		 		~root-inits
		 		this.changedNodes.add(root);
		 	}
		 	for (Node node : nodeset) {
		 		~boundary-check-node
		 		~nodeset-inits
		 	}
		  	while(!worklist.isEmpty()) ~worklist-body
		}
		
		@Override
		public Set<Node> getTermDependencies(Graph g, Node n) {
			~bstm*:term-dependencies
		}
	  }
  ]| 
  with
    (name, direction) := <rules-to-analysis-term> r
  ; prop-name      := <to-string-literal> name
  ; direction-enum := <dir-to-java-enum> direction
  ; boundary-check-node := <analysis-boundary-check(|direction)> java:expr |[ node.interval ]|
  ; boundary-check-root := <analysis-boundary-check(|direction)> java:expr |[ root.interval ]|
  ; boundary-check-successor := <analysis-boundary-check(|direction)> java:expr |[ successor.interval ]|

  ; value-inits := <retain-all(?PropDef(_, UserTypeParams(_, _))); map(propdef-to-add)> r
  ; stmt := <node-factory-switch> r
  ; val-setters := <get-newvalue-setters> r
  ; forward-updaters := <get-forward-updaters> r
  ; backward-updaters := <get-backward-updaters> r
  ; worklist-body := Block(<concat> [
      java:bstm* |[
	    Node node = worklist.poll();
	    inWorklist.remove(node);
	    ~boundary-check-node
      ]|,
  	  val-setters,
  	  [java:bstm |[
	    for (Node successor : g.childrenOf(node)) {
	      ~boundary-check-successor
	      boolean changed = false;
	      ~*forward-updaters
	      if (changed && !inWorklist.contains(successor)) {
	        worklist.add(successor);
	        inWorklist.add(successor);
	      }
	      if (changed) {
			this.changedNodes.add(successor);
		  }
	    } 	  
  	  ]|],
	  [java:bstm |[
	  	for (Node successor : g.parentsOf(node)) {
	      boolean changed = false;
	      ~boundary-check-successor
	      ~*backward-updaters
	      if (changed && !inWorklist.contains(successor)) {
	        worklist.add(successor);
	        inWorklist.add(successor);
	      }
	      if (changed) {
			this.changedNodes.add(successor);
		  }
	    }
  	  ]|]
    ])
  ; root-inits    := <lift-single> Block(<retain-all(?PropDef(_, _)); map(propdef-to-init)> r)
  ; nodeset-inits := <lift-single> Block(<retain-all(?PropDef(_, _)); map(propdef-to-nodeset-init(|direction))> r)
  ; term-dependencies := <retain-all(?PropRule(_, _, _, _)); prop-rules-to-term-dependencies>  r
 
  propdef-to-nodeset-init(|direction): PropDef(n, _) -> java:bstm |[
	  {
		FlockLattice init = node.getProperty(~name).lattice;
		for (Node pred : ~predecessors) {
		  FlockLattice live_o = pred.getProperty(~name).transfer.eval(pred);
		  init = init.lub(live_o);
		}
		node.getProperty(~name).lattice = init;
		this.changedNodes.add(node);
	  }   	
    ]|
  where
    name := <to-string-literal> n
  ; predecessors := <?"forward" < !|[ g.parentsOf(node) ]| + !|[ g.childrenOf(node) ]|> direction

  get-newvalue-setters = filter(?PropDef(_, _)); map(propdef-to-newvalue)

  propdef-to-newvalue: PropDef(name, _) -> java:bstm |[ FlockLattice ~new-name = node.getProperty(~prop-name).transfer.eval(node); ]|
  where
    new-name := $[[name]_n]
  ; prop-name := <to-string-literal> name
 
  propdef-to-add: PropDef(n, UserTypeParams(tname, _)) -> java:bstm |[
  	node.addProperty(~name, ~tname.bottom());
  ]| where name := <to-string-literal> n
                    
  propdef-to-init: PropDef(n, _) -> java:bstm |[
  	root.getProperty(~name).lattice = root.getProperty(~name).init.eval(root);
  ]| where name := <to-string-literal> n

  lift-single: Block([stmt]) -> stmt
  lift-single: Block(s) -> <id>
  
  rules-to-analysis-term: r -> <getfirst(rule-to-prop-dir)> r
  rule-to-prop-dir: PropRule(name, Backward(_, _), _, _) -> (name, "backward")
  rule-to-prop-dir: PropRule(name, Forward(_, _), _, _) -> (name, "forward")
  
  dir-to-java-enum: "forward"  -> java:expr |[ Direction.FORWARD ]|
  dir-to-java-enum: "backward" -> java:expr |[ Direction.BACKWARD ]|
  
  get-forward-updaters  = get-forwards;  map(name-to-updater); concat
  get-backward-updaters = get-backwards; map(name-to-updater); concat
  
  get-backwards = filter(?PropRule(_, Backward(_, _), _, _)); map(get-name); uniq
  get-forwards  = filter(?PropRule(_, Forward(_, _), _, _));  map(get-name); uniq
  get-name: PropRule(name, _, _, _) -> name
  
  name-to-updater: name -> java:bstm* |[
  	FlockLattice ~old-name = successor.getProperty(~prop-name).lattice;
	if (~new-name.nleq(~old-name)) {
		successor.getProperty(~prop-name).lattice = ~old-name.lub(~new-name);
		changed = true;
	}	  
  ]|
  where
    old-name := $[[name]_o]
  ; new-name := $[[name]_n]
  ; prop-name := <to-string-literal> name
  
  to-new-name = append-string(|"_n")
  to-old-name = append-string(|"_o")

  analysis-boundary-check(|dir): e -> java:bstm |[ if (e < intervalBoundary) continue; ]| where <equal(|dir)> "backward"
  analysis-boundary-check(|dir): e -> java:bstm |[ if (e > intervalBoundary) continue; ]| where <equal(|dir)> "forward"
  
  analysis-name: (n, _) -> n
  analysis-direction: (_, d) -> d
  
  direction-to-is-forward-expr: "backward" -> |[ false ]|
  direction-to-is-forward-expr: "forward"  -> |[ true ]|
 
  /*
  * Rules that generate the code for gathering dependencies based on property rules
  */
 
  prop-rules-to-term-dependencies: r -> java:bstm* |[
  	HashSet<Node> dependencies = new HashSet<Node>();
  	
  	return dependencies;
  ]|
  where dependency-stmts := <retain-all(rule-to-term-dependencies)> r
  
  /*
  * Algorithm to generate code
  * Pattern p
  * For each constructor in p + distance to the root pattern
  *   Output java code: 
  *     given changed node n
  *     for pair (con, dist) in statically generated set
  *       if constr of n is con
  *         try pattern of parent of n with distance dist
  *         if match -> add node to result
  * 
  */
  
  rule-to-term-dependencies: PropRule(_, p, _, _) -> []
  where
    match := <get-match> p
  with
    code := <gather-pattern-matchables; debug> (match, 0)
  
  gather-pattern-matchables: (PatternTerm(con, sub), n) -> [(con, n) | sublist]
  where sublist := <map(!(<id>, <inc> n); gather-pattern-matchables)> sub
  gather-pattern-matchables: (PatternVar(_), n) -> [("_", n)]
  gather-pattern-matchables: (_, n) -> []
  
  get-match: Forward(_, m) -> m 
  get-match: Backward(_, m) -> m 
  