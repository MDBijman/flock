module codegen/properties-class

imports

  codegen/-

  signatures/flock/-
  signatures/flock/desugar/-
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

strategies

  module-to-props-java: Module(name, _, r) -> java:compilation-unit |[
    package org.spoofax;
    ~import-dec*:imports
    public class FlowAnalysisProperties {
      ~*inners
    }
  ]|
  with 
    imports := <all-imports>
  ; inners := <retain-all(type-to-class)> r 
  
  
  type-to-class: TypeDefParams(name, _, WithDependencies(), _) -> java:classb-dec |[
    static class ~name extends FlockValueWithDependencies {
      public IStrategoTerm value;
      public Set<Dependency> dependencies;
      
      ~name(~name other) {
        this.value = other.value;
        this.dependencies = other.dependencies;
      }
      
	  ~name(IStrategoTerm value) {
	    this.value = value;
		this.dependencies = SetUtils.create();
	  }
	
	  ~name(IStrategoTerm value, Dependency origin) {
		this.value = value;
		this.dependencies = SetUtils.create(origin);
	  }
	
	  ~name(IStrategoTerm value, Set<Dependency> dependencies) {
		this.value = value;
		this.dependencies.addAll(dependencies);
	  }
	
	  public ~name withOrigin(Set<Dependency> dependencies) {
		this.dependencies.addAll(dependencies);
		return this;
	  }
	
	  public ~name withOrigin(CfgNodeId id) {
		this.dependencies.add(new Dependency(id));
		return this;
	  }
	  
	  @Override
	  public IStrategoTerm toTerm() {
		return this.value;
	  }
	
	  @Override
	  public String toString() {
		String pre = ~a + this.value.toString() + ~b;
		StringBuilder sb = new StringBuilder();
		for (Dependency dep : dependencies) {
		  sb.append(dep.id.getId());
		  sb.append(~comma);
		}
		String post = ~c;
		return pre + sb.toString() + post;
	  }
	
	  @Override
	  public boolean equals(Object obj) {
		if (!(obj instanceof ~name)) {
		  return false;
		}
		~name other = (~name) obj;
				
		return this.value.equals(other.value) && this.dependencies.equals(other.dependencies);
	  }
	
	  @Override
	  public int hashCode() {
		return value.hashCode();
	  }
	
	  @Override
	  public Set<Dependency> dependencies() {
		return this.dependencies;
	  }

	  @Override
	  public boolean removeDependency(Dependency d) {
		return this.dependencies.remove(d);		
	  }
	
	  @Override
	  public boolean hasDependency(Dependency d) {
		return this.dependencies.contains(d);
	  }

	  @Override
	  public void addDependency(Dependency d) {
		this.dependencies.add(d);
	  }
    }
  ]| 
  where 
    a := <to-string-literal> "Value(\\\""
  ; b := <to-string-literal> "\\\", {"
  ; c := <to-string-literal> "})"
  ; comma := <to-string-literal> ","
  
  type-to-class: TypeDefParams(name, _, None(), _) -> java:classb-dec |[
    static class ~name extends FlockValue {
	  public IStrategoTerm value;
      
	  ~name(IStrategoTerm value) {
	    this.value = value;
	  }
	
	  @Override
	  public String toString() {
		String pre = ~a + this.value.toString() + ~b;
		StringBuilder sb = new StringBuilder();
		String post = ~c;
		return pre + sb.toString() + post;
	  }
	
	  @Override
	  public boolean equals(Object obj) {
		if (!(obj instanceof ~name)) {
		  return false;
		}
		~name other = (~name) obj;
				
		return this.value.equals(other.value);
	  }
	
	  @Override
	  public int hashCode() {
		return value.hashCode();
	  }
    }
  ]|
  where 
    a := <to-string-literal> "Value(\\\""
  ; b := <to-string-literal> "\\\", {"
  ; c := <to-string-literal> "})"
  
       