module codegen/strategies-class

imports

  codegen/-

  signatures/flock/-
  signatures/flock/desugar/-
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

strategies

  module-to-strategies-java: Module(name, _, r) -> java:compilation-unit |[
    package org.spoofax;
    ~import-dec*:imports
    public class FlowAnalysisStrategies {
      ~*inners
    }
  ]|
  with 
    imports := <all-imports>
  ; inners := <retain-all(propdef-to-strategy-class)> r 
  
  propdef-to-strategy-class: PropDef(name, type) -> classb-dec |[
    public static class ~class-name extends Strategy {
      public static ~class-name instance = new ~class-name();
       
      @Override
	  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
        ITermFactory factory = context.getFactory();
        CfgNodeId id = new CfgNodeId(((IStrategoInt) current).intValue());
        Node node = Flock.instance.getNode(id);
        if (node == null) {
          Flock.printDebug(~error-message + id.getId());
          return current;
        }
        Flock.instance.analysisWithName(~property-name).updateUntilBoundary(Flock.instance.graph, node);
        
		~result-stmt

		return result;
      }
    }
  ]|
  with
    class-name := <concat-strings> ["get_", name, "_0_0"]
  ; error-message := <to-string-literal> "CfgNode is null with id "
  ; property-name := <to-string-literal> name
  ; result-stmt := <type-to-strategy-result(|property-name)> type
  
  type-to-strategy-result(|property-name): t@UserTypeParams("MaySet", [p]) -> java:bstm |[
	IStrategoList result = factory.makeList(((Collection<? extends IStrategoTerm>) node.getProperty(~property-name).lattice.value())
		.stream()
		.map(n -> Helpers.toTerm(n))
		.collect(Collectors.toList()));
  ]|
  
  type-to-strategy-result(|property-name): UserTypeParams(name, []) -> java:bstm |[
     IStrategoTerm result = ((FlockValue) node.getProperty(~property-name).lattice.value()).toTerm(); 
  ]|
  
  
  
  