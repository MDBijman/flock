module codegen/strategies-class

imports

  codegen/-

  signatures/flock/-
  signatures/flock/desugar/-
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

strategies

  module-to-strategies-java: Module(name, _, r) -> <retain-all(propdef-to-strategy-classes); flatten-list> r 
  
  /*
  * Returns a list of pairs (java class, filename).
  */
  propdef-to-strategy-classes: PropDef(name, UserTypeParams("MaySet", [p]), _) -> [(class-name, java:compilation-unit |[
    package org.spoofax;
    ~import-dec*:imports
    public class ~class-name extends Strategy {
      public static ~class-name instance = new ~class-name();
       
      @Override
	  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
        ITermFactory factory = context.getFactory();
        TermId id = new TermId(((IStrategoInt) current).intValue());
        Node node = Flock.instance.getNode(id);
        if (node == null) {
          Flock.printDebug(~error-message + id.getId());
          return null;
        }
        Flock.instance.analysisWithName(~property-name).performDataAnalysis(Flock.instance.graph, Flock.instance.graph_scss, node);
        
		IStrategoList result = factory.makeList(((Collection<? extends IStrategoTerm>) node.getProperty(~property-name).lattice.value())
			.stream()
			.map(n -> Helpers.toTerm(n))
			.collect(Collectors.toList()));

		return result;
      }
    }
  ]|)]
  with
    imports := <all-imports>
  ; class-name := <concat-strings> ["get_", name, "_0_0"]
  ; error-message := <to-string-literal> "CfgNode is null with id "
  ; property-name := <to-string-literal> name
  
  propdef-to-strategy-classes: PropDef(name, UserTypeParams("MustSet", [p]), _) -> [(class-name, java:compilation-unit |[
    package org.spoofax;
    ~import-dec*:imports
    public class ~class-name extends Strategy {
      public static ~class-name instance = new ~class-name();
       
      @Override
	  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
        ITermFactory factory = context.getFactory();
        TermId id = new TermId(((IStrategoInt) current).intValue());
        Node node = Flock.instance.getNode(id);
        if (node == null) {
          Flock.printDebug(~error-message + id.getId());
          return null;
        }
        Flock.instance.analysisWithName(~property-name).performDataAnalysis(Flock.instance.graph, Flock.instance.graph_scss, node);
        
		IStrategoList result = factory.makeList(((Collection<? extends IStrategoTerm>) node.getProperty(~property-name).lattice.value())
			.stream()
			.map(n -> Helpers.toTerm(n))
			.collect(Collectors.toList()));

		return result;
      }
    }
  ]|)]
  with
    imports := <all-imports>
  ; class-name := <concat-strings> ["get_", name, "_0_0"]
  ; error-message := <to-string-literal> "CfgNode is null with id "
  ; property-name := <to-string-literal> name
  
  propdef-to-strategy-classes: PropDef(name, UserTypeParams("SimpleMap", [k, v]), _) -> [(class-name, java:compilation-unit |[
    package org.spoofax;
    ~import-dec*:imports
    public class ~class-name extends Strategy {
      public static ~class-name instance = new ~class-name();
       
      @Override
	  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
        ITermFactory factory = context.getFactory();
        TermId id = new TermId(((IStrategoInt) current).intValue());
        Node node = Flock.instance.getNode(id);
        if (node == null) {
          Flock.printDebug(~error-message + id.getId());
          return null;
        }
        Flock.instance.analysisWithName(~property-name).performDataAnalysis(Flock.instance.graph, Flock.instance.graph_scss, node);
        
		IStrategoList result = factory
			.makeList(((Map<IStrategoTerm, IStrategoTerm>) node.getProperty(~property-name).lattice.value())
			.entrySet().stream().map(n -> factory.makeTuple(Helpers.toTerm(n.getKey()), Helpers.toTerm(n.getValue())))
			.collect(Collectors.toList()));

		return result;
      }
    }
    

  ]|), (class-name2, java:compilation-unit |[
    package org.spoofax;
    ~import-dec*:imports
    public class ~class-name2 extends Strategy {
      public static ~class-name2 instance = new ~class-name2();
       
      @Override
	  public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm key) {
        ITermFactory factory = context.getFactory();
        TermId id = new TermId(((IStrategoInt) current).intValue());
        Node node = Flock.instance.getNode(id);
        if (node == null) {
          Flock.printDebug(~error-message + id.getId());
          return null;
        }
        Flock.instance.analysisWithName(~property-name).performDataAnalysis(Flock.instance.graph, Flock.instance.graph_scss, node);
        
		Map<IStrategoTerm, Object> values = (Map<IStrategoTerm, Object>) node
				.getProperty(~property-name).lattice.value();

		Object value = values.get(key);

		if (value == null) {
			return null;
		}

		IStrategoTerm asTerm = Helpers.toTerm(value);

		return asTerm;
      }
    }
  ]|)]
  with
    imports := <all-imports>
  ; class-name := <concat-strings> ["get_", name, "_0_0"]
  ; class-name2 := <concat-strings> ["get_", name, "_0_1"]
  ; error-message := <to-string-literal> "CfgNode is null with id "
  ; property-name := <to-string-literal> name
  
  propdef-to-strategy-classes: PropDef(name, _, _) -> [(class-name, java:compilation-unit |[
    package org.spoofax;
    ~import-dec*:imports
    public static class ~class-name extends Strategy {
      public static ~class-name instance = new ~class-name();
       
      @Override
	  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
        ITermFactory factory = context.getFactory();
        TermId id = new TermId(((IStrategoInt) current).intValue());
        Node node = Flock.instance.getNode(id);
        if (node == null) {
          Flock.printDebug(~error-message + id.getId());
          return null;
        }
        Flock.instance.analysisWithName(~property-name).performDataAnalysis(Flock.instance.graph, Flock.instance.graph_scss, node);
        
		IStrategoTerm result = ((FlockValue) node.getProperty(~property-name).lattice.value()).toTerm(); 

		return result;
      }
    }
  ]|)]
  with
    imports := <all-imports>
  ; class-name := <concat-strings> ["get_", name, "_0_0"]
  ; error-message := <to-string-literal> "CfgNode is null with id "
  ; property-name := <to-string-literal> name 
  
  
  
  