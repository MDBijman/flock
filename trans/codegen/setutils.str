module codegen/setutils

imports
  codegen/util

  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  setutils-type-name = !"SetUtils"
  setutils-type-id = !Id(<setutils-type-name>)
  setutils-type = !ClassType(<setutils-type-id>, None())

  invoke-setutils(|func): args -> InvokeQExp(ExpressionName(<setutils-type-id>), None(), Id(func), args)
  set-create = invoke-setutils(|"create")
  set-union = invoke-setutils(|"union")
  set-difference = invoke-setutils(|"difference")
  set-intersection = invoke-setutils(|"intersection")
  set-subseteq = invoke-setutils(|"isSubsetEquals")
  set-superseteq = invoke-setutils(|"isSupersetEquals")
  set-subsets = invoke-setutils(|"isSubset")
  set-superset = invoke-setutils(|"isSuperset")

  maputils-type-name = !"MapUtils"
  maputils-type-id = !Id(<maputils-type-name>)
  maputils-type = !ClassType(<maputils-type-id>, None())

  invoke-maputils(|func): args -> InvokeQExp(ExpressionName(<maputils-type-id>), None(), Id(func), args)
  map-create = invoke-maputils(|"create")
  map-union = invoke-maputils(|"union")
  map-difference = invoke-maputils(|"difference")
  map-intersection = invoke-maputils(|"intersection")
  map-subseteq = invoke-maputils(|"isSubsetEquals")
  map-superseteq = invoke-maputils(|"isSupersetEquals")
  map-subsets = invoke-maputils(|"isSubset")
  map-superset = invoke-maputils(|"isSuperset")

  cast-to-set: expr -> CastReference(ClassType([], Id("Set"), None()), [], expr)
  cast-to-map: expr -> CastReference(ClassType([], Id("Map"), None()), [], expr)
