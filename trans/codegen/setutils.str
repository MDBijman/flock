module codegen/setutils

imports
  codegen/util
  codegen/universalset
  
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  setutils-type-name = !"SetUtils"
  setutils-type-id = !Id(<setutils-type-name>)
  setutils-type = !ClassType(<setutils-type-id>, None())
  
  invoke-setutils(|func): args -> InvokeQExp(ExpressionName(<setutils-type-id>), None(), Id(func), args)
  set-create = invoke-setutils(|"create")
  set-union = invoke-setutils(|"union")
  set-difference = invoke-setutils(|"difference")
  set-intersection = invoke-setutils(|"intersection")
  set-subseteq = invoke-setutils(|"isSubsetEquals")
  set-superseteq = invoke-setutils(|"isSupersetEquals")
  set-subsets = invoke-setutils(|"isSubset")
  set-superset = invoke-setutils(|"isSuperset")
  
  maputils-type-name = !"MapUtils"
  maputils-type-id = !Id(<maputils-type-name>)
  maputils-type = !ClassType(<maputils-type-id>, None())
  
  invoke-maputils(|func): args -> InvokeQExp(ExpressionName(<maputils-type-id>), None(), Id(func), args)
  map-create = invoke-maputils(|"create")
  map-union = invoke-maputils(|"union")
  map-difference = invoke-maputils(|"difference")
  map-intersection = invoke-maputils(|"intersection")
  map-subseteq = invoke-maputils(|"isSubsetEquals")
  map-superseteq = invoke-maputils(|"isSupersetEquals")
  map-subsets = invoke-maputils(|"isSubset")
  map-superset = invoke-maputils(|"isSuperset")
  

  cast-to-set: expr -> CastReference(ClassType([], Id("Set"), None()), [], expr)
  cast-to-map: expr -> InvokeQExp(
	                      CastReference(
	                        ClassType(
	                          []
	                        , Id("Map")
	                        , Some(
	                            TypeArguments(
	                              [ ClassType([], Id("Object"), None())
	                              , ClassType([], Id("Object"), None())
	                              ]
	                            )
	                          )
	                        )
	                      , [], expr), None(), Id("entrySet"), [])
  
  setutils-class = ![ClassDeclaration(
      []
    , <setutils-type-id>
    , None()
    , None()
    , None()
    , [ MethodDecl(
          [Public(), Static()]
        , MethodHeader(
            ClassType(Id("Set"), None())
          , Id("create")
          , SingleParam(
              VarArityParam(
                []
              , ClassType(Id("Object"), None())
              , []
              , VariableDecl(Id("terms"))
              )
            )
          , []
          , None()
          )
        , Block(
            [ LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("result"))
                    , NewInstance(None(), [], Id("HashSet"), [], None(), [])
                    )
                  ]
                )
              )
            , ForEach(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("term"))
              , ExpressionName(Id("terms"))
              , Block(
                  [ ExpressionStatement(
                      InvokeQExp(
                        ExpressionName(Id("result"))
                      , None()
                      , Id("add")
                      , [ExpressionName(Id("term"))]
                      )
                    )
                  ]
                )
              )
            , Return(ExpressionName(Id("result")))
            ]
          )
        )
      , MethodDecl(
          [Public(), Static()]
        , MethodHeader(
            ClassType(Id("Set"), None())
          , Id("union")
          , ParamList(
              [FormalParam(
                 []
               , ClassType(Id("Object"), None())
               , VariableDecl(Id("l"))
               )]
            , FormalParam(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("r"))
              )
            )
          , []
          , None()
          )
        , Block(
            [ LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("ls"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("l"))
                      )
                    )
                  ]
                )
              )
            , LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("rs"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("r"))
                      )
                    )
                  ]
                )
              )
            , If(
                LazyOr(
                  InstanceOf(
                    ExpressionName(Id("ls"))
                  , <universalset-type;convert-classtype>
                  )
                , InstanceOf(
                    ExpressionName(Id("rs"))
                  , <universalset-type;convert-classtype>
                  )
                )
              , Block(
                  [Return(
                     NewInstance(None(), [], <universalset-type-id>, [], None(), [])
                   )]
                )
              )
            , LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(
                    Id("Set")
                  , Some(TypeArguments([ClassType([], Id("IStrategoTerm"), None())]))
                  )
                , [ VariableDeclInit(
                      VariableDecl(Id("result"))
                    , NewInstance(None(), [], Id("HashSet"), [], None(), [])
                    )
                  ]
                )
              )
            , ExpressionStatement(
                InvokeQExp(
                  ExpressionName(Id("result"))
                , None()
                , Id("addAll")
                , [ExpressionName(Id("ls"))]
                )
              )
            , ExpressionStatement(
                InvokeQExp(
                  ExpressionName(Id("result"))
                , None()
                , Id("addAll")
                , [ExpressionName(Id("rs"))]
                )
              )
            , Return(ExpressionName(Id("result")))
            ]
          )
        )
      , MethodDecl(
          [Public(), Static()]
        , MethodHeader(
            ClassType(Id("Set"), None())
          , Id("intersection")
          , ParamList(
              [FormalParam(
                 []
               , ClassType(Id("Object"), None())
               , VariableDecl(Id("l"))
               )]
            , FormalParam(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("r"))
              )
            )
          , []
          , None()
          )
        , Block(
            [ LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("ls"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("l"))
                      )
                    )
                  ]
                )
              )
            , LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("rs"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("r"))
                      )
                    )
                  ]
                )
              )
            , If(
                InstanceOf(
                  ExpressionName(Id("ls"))
                , <universalset-type;convert-classtype>
                )
              , Block([Return(ExpressionName(Id("rs")))])
              )
            , If(
                InstanceOf(
                  ExpressionName(Id("rs"))
                , <universalset-type;convert-classtype>
                )
              , Block([Return(ExpressionName(Id("ls")))])
              )
            , LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("result"))
                    , NewInstance(None(), [], Id("HashSet"), [], None(), [])
                    )
                  ]
                )
              )
            , ForEach(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("e"))
              , ExpressionName(Id("ls"))
              , Block(
                  [ If(
                      InvokeQExp(
                        ExpressionName(Id("rs"))
                      , None()
                      , Id("contains")
                      , [ExpressionName(Id("e"))]
                      )
                    , Block(
                        [ ExpressionStatement(
                            InvokeQExp(
                              ExpressionName(Id("result"))
                            , None()
                            , Id("add")
                            , [ExpressionName(Id("e"))]
                            )
                          )
                        ]
                      )
                    )
                  ]
                )
              )
            , Return(ExpressionName(Id("result")))
            ]
          )
        )
      , MethodDecl(
          [Public(), Static()]
        , MethodHeader(
            ClassType(Id("Set"), None())
          , Id("difference")
          , ParamList(
              [FormalParam(
                 []
               , ClassType(Id("Object"), None())
               , VariableDecl(Id("l"))
               )]
            , FormalParam(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("r"))
              )
            )
          , []
          , None()
          )
        , Block(
            [ LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("ls"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("l"))
                      )
                    )
                  ]
                )
              )
            , LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("rs"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("r"))
                      )
                    )
                  ]
                )
              )
            , LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("result"))
                    , NewInstance(None(), [], Id("HashSet"), [], None(), [])
                    )
                  ]
                )
              )
            , ForEach(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("e"))
              , ExpressionName(Id("ls"))
              , Block(
                  [ If(
                      Not(
                        InvokeQExp(
                          ExpressionName(Id("rs"))
                        , None()
                        , Id("contains")
                        , [ExpressionName(Id("e"))]
                        )
                      )
                    , Block(
                        [ ExpressionStatement(
                            InvokeQExp(
                              ExpressionName(Id("result"))
                            , None()
                            , Id("add")
                            , [ExpressionName(Id("e"))]
                            )
                          )
                        ]
                      )
                    )
                  ]
                )
              )
            , Return(ExpressionName(Id("result")))
            ]
          )
        )
      , MethodDecl(
          [Public(), Static()]
        , MethodHeader(
            BooleanType()
          , Id("isSubsetEquals")
          , ParamList(
              [FormalParam(
                 []
               , ClassType(Id("Object"), None())
               , VariableDecl(Id("l"))
               )]
            , FormalParam(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("r"))
              )
            )
          , []
          , None()
          )
        , Block(
            [ LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("ls"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("l"))
                      )
                    )
                  ]
                )
              )
            , LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("rs"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("r"))
                      )
                    )
                  ]
                )
              )
            , If(
                InstanceOf(
                  ExpressionName(Id("ls"))
                , <universalset-type;convert-classtype>
                )
              , Block([Return(False())])
              )
            , If(
                InstanceOf(
                  ExpressionName(Id("rs"))
                , <universalset-type;convert-classtype>
                )
              , Block([Return(True())])
              )
            , ForEach(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("e"))
              , ExpressionName(Id("ls"))
              , Block(
                  [ If(
                      Not(
                        InvokeQExp(
                          ExpressionName(Id("rs"))
                        , None()
                        , Id("contains")
                        , [ExpressionName(Id("e"))]
                        )
                      )
                    , Block([Return(False())])
                    )
                  ]
                )
              )
            , Return(True())
            ]
          )
        )
      , MethodDecl(
          [Public(), Static()]
        , MethodHeader(
            BooleanType()
          , Id("isSupersetEquals")
          , ParamList(
              [FormalParam(
                 []
               , ClassType(Id("Object"), None())
               , VariableDecl(Id("l"))
               )]
            , FormalParam(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("r"))
              )
            )
          , []
          , None()
          )
        , Block(
            [ LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("ls"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("l"))
                      )
                    )
                  ]
                )
              )
            , LocVarDeclStm(
                LocalVarDecl(
                  []
                , ClassType(Id("Set"), None())
                , [ VariableDeclInit(
                      VariableDecl(Id("rs"))
                    , CastReference(
                        ClassType([], Id("Set"), None())
                      , []
                      , ExpressionName(Id("r"))
                      )
                    )
                  ]
                )
              )
            , If(
                InstanceOf(
                  ExpressionName(Id("ls"))
                , <universalset-type;convert-classtype>
                )
              , Block([Return(True())])
              )
            , If(
                InstanceOf(
                  ExpressionName(Id("rs"))
                , <universalset-type;convert-classtype>
                )
              , Block([Return(False())])
              )
            , ForEach(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("e"))
              , ExpressionName(Id("rs"))
              , Block(
                  [ If(
                      Not(
                        InvokeQExp(
                          ExpressionName(Id("ls"))
                        , None()
                        , Id("contains")
                        , [ExpressionName(Id("e"))]
                        )
                      )
                    , Block([Return(False())])
                    )
                  ]
                )
              )
            , Return(True())
            ]
          )
        )
      , MethodDecl(
          [Public(), Static()]
        , MethodHeader(
            BooleanType()
          , Id("isSuperset")
          , ParamList(
              [FormalParam(
                 []
               , ClassType(Id("Object"), None())
               , VariableDecl(Id("l"))
               )]
            , FormalParam(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("r"))
              )
            )
          , []
          , None()
          )
        , Block(
            [ If(
                InvokeQExp(
                  ExpressionName(Id("l"))
                , None()
                , Id("equals")
                , [ExpressionName(Id("r"))]
                )
              , Block([Return(False())])
              )
            , Return(
                Invoke(
                  MethodName(Id("isSupersetEquals"))
                , [ExpressionName(Id("l")), ExpressionName(Id("r"))]
                )
              )
            ]
          )
        )
      , MethodDecl(
          [Public(), Static()]
        , MethodHeader(
            BooleanType()
          , Id("isSubset")
          , ParamList(
              [FormalParam(
                 []
               , ClassType(Id("Object"), None())
               , VariableDecl(Id("l"))
               )]
            , FormalParam(
                []
              , ClassType(Id("Object"), None())
              , VariableDecl(Id("r"))
              )
            )
          , []
          , None()
          )
        , Block(
            [ If(
                InvokeQExp(
                  ExpressionName(Id("l"))
                , None()
                , Id("equals")
                , [ExpressionName(Id("r"))]
                )
              , Block([Return(False())])
              )
            , Return(
                Invoke(
                  MethodName(Id("isSubsetEquals"))
                , [ExpressionName(Id("l")), ExpressionName(Id("r"))]
                )
              )
            ]
          )
        )
      ]
    )]
   
  
  maputils-class = ![ClassDeclaration(
	  []
	, Id("MapUtils")
	, None()
	, None()
	, None()
	, [ MethodDecl(
	      [Public(), Static()]
	    , MethodHeader(
	        ClassType(Id("Map"), None())
	      , Id("union")
	      , ParamList(
	          [ FormalParam(
	              []
	            , ClassType(Id("Lattice"), None())
	            , VariableDecl(Id("lat"))
	            )
	          , FormalParam(
	              []
	            , ClassType(Id("Object"), None())
	            , VariableDecl(Id("l"))
	            )
	          ]
	        , FormalParam(
	            []
	          , ClassType(Id("Object"), None())
	          , VariableDecl(Id("r"))
	          )
	        )
	      , []
	      , None()
	      )
	    , Block(
	        [ LocVarDeclStm(
	            LocalVarDecl(
	              []
	            , ClassType(Id("Map"), None())
	            , [ VariableDeclInit(
	                  VariableDecl(Id("ls"))
	                , CastReference(
	                    ClassType([], Id("Map"), None())
	                  , []
	                  , ExpressionName(Id("l"))
	                  )
	                )
	              ]
	            )
	          )
	        , LocVarDeclStm(
	            LocalVarDecl(
	              []
	            , ClassType(Id("HashMap"), None())
	            , [ VariableDeclInit(
	                  VariableDecl(Id("rs"))
	                , CastReference(
	                    ClassType([], Id("HashMap"), None())
	                  , []
	                  , ExpressionName(Id("r"))
	                  )
	                )
	              ]
	            )
	          )
	        , LocVarDeclStm(
	            LocalVarDecl(
	              []
	            , ClassType(Id("Map"), None())
	            , [ VariableDeclInit(
	                  VariableDecl(Id("res"))
	                , NewInstance(None(), [], Id("HashMap"), [], None(), [])
	                )
	              ]
	            )
	          )
	        , ExpressionStatement(
	            InvokeQExp(
	              ExpressionName(Id("res"))
	            , None()
	            , Id("putAll")
	            , [ExpressionName(Id("ls"))]
	            )
	          )
	        , ForEach(
			  []
			, ClassOrInterfaceTypeMember(
			    ClassType(Id("Map"), None())
			  , []
			  , Id("Entry")
			  , None()
			  )
			, VariableDecl(Id("e"))
			, CastReference(
			    ClassType(
			      []
			    , Id("Set")
			    , Some(
			        TypeArguments(
			          [ ClassOrInterfaceTypeMember(
			              ClassType([], Id("Map"), None())
			            , []
			            , Id("Entry")
			            , None()
			            )
			          ]
			        )
			      )
			    )
			  , []
			  , InvokeQExp(ExpressionName(Id("rs")), None(), Id("entrySet"), [])
			  )
			, Block(
			    [ IfElse(
			        InvokeQExp(
			          ExpressionName(Id("res"))
			        , None()
			        , Id("containsKey")
			        , [InvokeQExp(ExpressionName(Id("e")), None(), Id("getKey"), [])]
			        )
			      , Block(
			          [ LocVarDeclStm(
			              LocalVarDecl(
			                []
			              , ClassType(Id("Object"), None())
			              , [ VariableDeclInit(
			                    VariableDecl(Id("v"))
			                  , InvokeQExp(
			                      ExpressionName(Id("res"))
			                    , None()
			                    , Id("get")
			                    , [InvokeQExp(ExpressionName(Id("e")), None(), Id("getKey"), [])]
			                    )
			                  )
			                ]
			              )
			            )
			          , LocVarDeclStm(
			              LocalVarDecl(
			                []
			              , ClassType(Id("Object"), None())
			              , [ VariableDeclInit(
			                    VariableDecl(Id("m"))
			                  , InvokeQExp(
			                      ExpressionName(Id("lat"))
			                    , None()
			                    , Id("lub")
			                    , [ InvokeQExp(ExpressionName(Id("e")), None(), Id("getValue"), [])
			                      , ExpressionName(Id("v"))
			                      ]
			                    )
			                  )
			                ]
			              )
			            )
			          , ExpressionStatement(
			              InvokeQExp(
			                ExpressionName(Id("res"))
			              , None()
			              , Id("put")
			              , [ InvokeQExp(ExpressionName(Id("e")), None(), Id("getKey"), [])
			                , ExpressionName(Id("m"))
			                ]
			              )
			            )
			          ]
			        )
			      , Block(
			          [ ExpressionStatement(
			              InvokeQExp(
			                ExpressionName(Id("res"))
			              , None()
			              , Id("put")
			              , [ InvokeQExp(ExpressionName(Id("e")), None(), Id("getKey"), [])
			                , InvokeQExp(ExpressionName(Id("e")), None(), Id("getValue"), [])
			                ]
			              )
			            )
			          ]
			        )
			      )
			    ]
			  )
			)
	        , Return(ExpressionName(Id("res")))
	        ]
	      )
	    )
	  , MethodDecl(
	      [Public(), Static()]
	    , MethodHeader(
	        ClassType(Id("Map"), None())
	      , Id("create")
	      , ParamList(
	          [FormalParam(
	             []
	           , ClassType(Id("Object"), None())
	           , VariableDecl(Id("k"))
	           )]
	        , FormalParam(
	            []
	          , ClassType(Id("Object"), None())
	          , VariableDecl(Id("v"))
	          )
	        )
	      , []
	      , None()
	      )
	    , Block(
	        [ LocVarDeclStm(
	            LocalVarDecl(
	              []
	            , ClassType(Id("HashMap"), None())
	            , [ VariableDeclInit(
	                  VariableDecl(Id("result"))
	                , NewInstance(None(), [], Id("HashMap"), [], None(), [])
	                )
	              ]
	            )
	          )
	        , ExpressionStatement(
	            InvokeQExp(
	              ExpressionName(Id("result"))
	            , None()
	            , Id("put")
	            , [ExpressionName(Id("k")), ExpressionName(Id("v"))]
	            )
	          )
	        , Return(ExpressionName(Id("result")))
	        ]
	      )
	    ), 
	    MethodDecl(
		  [Public(), Static()]
		, MethodHeader(
		    ClassType(Id("Map"), None())
		  , Id("create")
		  , NoParams()
		  , []
		  , None()
		  )
		, Block(
		    [Return(
		       NewInstance(None(), [], Id("HashMap"), [], None(), [])
		     )]
		  )
		)
	  ]
	)]