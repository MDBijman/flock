module codegen/setutils

imports
  codegen/util
  codegen/universalset

  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  setutils-type-name = !"SetUtils"
  setutils-type-id = !Id(<setutils-type-name>)
  setutils-type = !ClassType(<setutils-type-id>, None())

  invoke-setutils(|func): args -> InvokeQExp(ExpressionName(<setutils-type-id>), None(), Id(func), args)
  set-create = invoke-setutils(|"create")
  set-union = invoke-setutils(|"union")
  set-difference = invoke-setutils(|"difference")
  set-intersection = invoke-setutils(|"intersection")
  set-subseteq = invoke-setutils(|"isSubsetEquals")
  set-superseteq = invoke-setutils(|"isSupersetEquals")
  set-subsets = invoke-setutils(|"isSubset")
  set-superset = invoke-setutils(|"isSuperset")

  maputils-type-name = !"MapUtils"
  maputils-type-id = !Id(<maputils-type-name>)
  maputils-type = !ClassType(<maputils-type-id>, None())

  invoke-maputils(|func): args -> InvokeQExp(ExpressionName(<maputils-type-id>), None(), Id(func), args)
  map-create = invoke-maputils(|"create")
  map-union = invoke-maputils(|"union")
  map-difference = invoke-maputils(|"difference")
  map-intersection = invoke-maputils(|"intersection")
  map-subseteq = invoke-maputils(|"isSubsetEquals")
  map-superseteq = invoke-maputils(|"isSupersetEquals")
  map-subsets = invoke-maputils(|"isSubset")
  map-superset = invoke-maputils(|"isSuperset")


  cast-to-set: expr -> CastReference(ClassType([], Id("Set"), None()), [], expr)
  cast-to-map: expr -> InvokeQExp(
	                      CastReference(
	                        ClassType(
	                          []
	                        , Id("Map")
	                        , Some(
	                            TypeArguments(
	                              [ ClassType([], Id("Object"), None())
	                              , ClassType([], Id("Object"), None())
	                              ]
	                            )
	                          )
	                        )
	                      , [], expr), None(), Id("entrySet"), [])

  setutils-class = ![java:type-dec |[
	public class SetUtils {
		public static Set create(Object... terms) {
			Set result = new HashSet();
			for (Object term : terms) {
				result.add(term);
			}
			return result;
		}
	
		public static Set union(Object l, Object r) {
			Set ls = (Set) l;
			Set rs = (Set) r;
			if (ls instanceof UniversalSet || rs instanceof UniversalSet) {
				return new UniversalSet();
			}
			Set<IStrategoTerm> result = new HashSet();
			result.addAll(ls);
			result.addAll(rs);
			return result;
		}
	
		public static Set intersection(Object l, Object r) {
			Set ls = (Set) l;
			Set rs = (Set) r;
			if (ls instanceof UniversalSet) {
				return rs;
			}
			if (rs instanceof UniversalSet) {
				return ls;
			}
			Set result = new HashSet();
			for (Object i : ls) {
				if (rs.contains(i)) {
					result.add(i);
				}
			}
			return result;
		}
	
		public static Set difference(Object l, Object r) {
			Set ls = (Set) l;
			Set rs = (Set) r;
			Set result = new HashSet();
			for (Object i : ls) {
				if (!rs.contains(i)) {
					result.add(i);
				}
			}
			return result;
		}
	
		public static boolean isSubsetEquals(Object l, Object r) {
			Set ls = (Set) l;
			Set rs = (Set) r;
			if (ls instanceof UniversalSet) {
				return false;
			}
			if (rs instanceof UniversalSet) {
				return true;
			}
			for (Object i : ls) {
				if (!rs.contains(i)) {
					return false;
				}
			}
			return true;
		}
	
		public static boolean isSupersetEquals(Object l, Object r) {
			Set ls = (Set) l;
			Set rs = (Set) r;
			if (ls instanceof UniversalSet) {
				return true;
			}
			if (rs instanceof UniversalSet) {
				return false;
			}
			for (Object i : rs) {
				if (!ls.contains(i)) {
					return false;
				}
			}
			return true;
		}
	
		public static boolean isSuperset(Object l, Object r) {
			if (l.equals(r)) {
				return false;
			}
			return isSupersetEquals(l, r);
		}
	
		public static boolean isSubset(Object l, Object r) {
			if (l.equals(r)) {
				return false;
			}
			return isSubsetEquals(l, r);
		}
	}
  ]|]


  maputils-class = ![java:type-dec |[
	public class MapUtils {
		public static Map union(Lattice lat, Object l, Object r) {
			Map ls = (Map) l;
			HashMap rs = (HashMap) r;
			Map res = new HashMap();
			res.putAll(ls);
			for (Map.Entry i : (Set<Map.Entry>) rs.entrySet()) {
				if (res.containsKey(i.getKey())) {
					Object v = res.get(i.getKey());
					Object m = lat.lub(i.getValue(), v);
					res.put(i.getKey(), m);
				} else {
					res.put(i.getKey(), i.getValue());
				}
			}
			return res;
		}
	
		public static Map create(Object k, Object v) {
			HashMap result = new HashMap();
			result.put(k, v);
			return result;
		}
	
		public static Map create() {
			return new HashMap();
		}
	}  
  ]|] 