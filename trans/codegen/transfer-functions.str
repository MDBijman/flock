module codegen/transfer-functions

imports
  codegen/nodes
  codegen/util
  codegen/lattices
  codegen/expressions
  codegen/cfg-matcher
  codegen/types
  
  signatures/flock/-
  signatures/flock/desugar/-
  
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  transfer-type-name = !"TransferFunction"
  transfer-type-id = !Id(<transfer-type-name>)
  transfer-type = !ClassType(<transfer-type-id>, None())
  to-transfer-name = append-string(|<transfer-type-name>)
  
  transfer-classes(|r) = <filter(?PropRule(_, _, _, _)); reverse; number(id); create-all-transfer-classes> r
  create-all-transfer-classes: numbered-rules -> <concat> [<transfer-instances-class> numbered-rules, <create-transfer-classes> numbered-rules]
  
  set-term-to-node-term = ![java:bstm |[ IStrategoTerm term = node.virtualTerm.toTermWithoutAnnotations(); ]|]
  create-transfer-classes = map(create-transfer-class)
  create-transfer-class: (PropRule(prop, pat, expr, wc), index) -> java:type-dec |[
	class ~name extends TransferFunction {
		@SuppressWarnings({ ~unchecked_str, ~rawtypes_str, ~unused_str })
		@Override
		public boolean eval(Analysis.Direction direction, FlockLattice res, Node node) {
			ITermFactory factory = Flock.instance.factory;
			~bstm*:statements
		}
	}
  ]|
  where
    unchecked_str := <to-string-literal> "unchecked"
  ; rawtypes_str := <to-string-literal> "rawtypes"
  ; unused_str := <to-string-literal> "unused"
  ; name         := <get-transfer-id> index
  ; pattern-vars := <pattern-to-vars> pat
  ; where-vars   := <where-to-code> wc
  ; stmts := <transform-result-expr(|"res")> expr
  ; statements := <concat> [
  	  <set-term-to-node-term>,
  	  pattern-vars,
  	  where-vars,
  	  stmts
  	]
  
  pattern-to-vars: Backward(p, name) -> <concat> [<name-to-node> name, <pattern-to-decls(|"term", [])> p]
  pattern-to-vars: Forward(name, p) -> <concat> [<name-to-node> name, <pattern-to-decls(|"term", [])> p]
  pattern-to-vars: PropPatternStart(p) -> <pattern-to-decls(|[], "term")> p
  pattern-to-vars: PropPatternEnd(p) -> <pattern-to-decls(|[], "term")> p
  
  name-to-node: name -> [LocVarDeclStm(LocalVarDecl([], ClassType(Id("Node"), None()), [VariableDeclInit(VariableDecl(Id(name)), ExpressionName(Id("node")))]))]
  
  where-to-code: NoWhereClause() -> []
  where-to-code: WhereClause(bindings) -> <map(binding-to-code); concat> bindings
  binding-to-code: t@TypedBinding(var, type, expr) -> [
      stmt*,
      java:bstm |[ ~java-type ~var = ~result-expr; ]|
    ]
    with
      (result-name, stmt*) := <transform-toplevel-expr> expr
    ; java-type := <type-to-java-type> type
    ; result-expr := <simple-cast(|type)> result-name

  transfer-instances-class: numbered-rules -> [ClassDeclaration(
      []
    , Id("TransferFunctions")
    , None()
    , None()
    , None()
    , <map(create-transfer-field)> numbered-rules
    )]
  create-transfer-field: (_, index) -> FieldDecl([Public(), Static()], ClassType(Id("TransferFunction"), None()), [ VariableDeclInit(VariableDecl(<get-transfer-id> index), NewInstance(None(), [], <get-transfer-id> index, [], None(), []))])
  
  get-transfer-id: index -> <concat-strings> ["TransferFunction", <int-to-string> index]
  get-transfer-function: index -> ExpressionName(AmbiguousName(Id("TransferFunctions")), <get-transfer-id> index)
  
  // Failures
  binding-to-code: Binding(var, expr) -> <fail> with <debug> "Bindings must be typed"
  
  
  