module codegen/imports

imports
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  create-import: c -> SingleTypeImport(<split-typename;reverse;create-typename;replace-outer-typename> c)
  create-typename: [h] -> PackageOrTypeName(Id(h))
  create-typename: [h|t] -> PackageOrTypeName(<create-typename> t, Id(h))
  replace-outer-typename: PackageOrTypeName(x, y) -> TypeName(x, y)
  replace-outer-typename: PackageOrTypeName(x) -> TypeName(x)
  
  split-typename = explode-string;SplitInit;rec x(SplitExit <+ split-typename-next; x)  
  split-typename-next: (xs, cs, [y|ys]) -> (xs, [y|cs], ys) where <not(eq)> (y, 46)
  split-typename-next: (xs, cs, [46|ys]) -> ([<reverse; implode-string> cs | xs], [], ys)
  
  all-imports = <map(create-import)> [
  	"org.apache.commons.lang3.tuple.Pair",
  	"org.strategoxt.lang.Context",
  	"org.spoofax.interpreter.terms.IStrategoTerm",
  	"org.spoofax.interpreter.terms.IStrategoAppl",
  	"org.spoofax.interpreter.terms.IStrategoTuple",
  	"org.spoofax.interpreter.terms.IStrategoList",
  	"org.spoofax.interpreter.terms.IStrategoString",
  	"org.spoofax.interpreter.terms.IStrategoInt",
  	"org.spoofax.terms.io.TAFTermReader",
  	"org.spoofax.terms.TermFactory",
  	"java.io.IOException",
  	"org.spoofax.terms.util.M",
  	"org.spoofax.terms.util.TermUtils",
  	"java.util.HashSet",
  	"java.util.Set",
  	"java.util.HashMap",
  	"java.util.Map",
  	"java.util.Stack",
  	"java.util.Map.Entry",
   	"java.util.stream.Collectors",
  	"java.util.concurrent.LinkedBlockingQueue",
  	"java.util.Queue",
  	"java.util.List",
  	"java.util.ArrayList",
  	"java.util.Iterator",
  	"java.util.Collection",
  	"java.util.function.Supplier",
  	"org.spoofax.terms.StrategoTuple",
  	"org.spoofax.terms.StrategoAppl",
  	"org.spoofax.terms.StrategoConstructor",
  	"org.spoofax.terms.StrategoInt",
  	"org.spoofax.terms.StrategoString",
  	"org.spoofax.terms.StrategoList",
  	"flock.subject.common.Graph",
  	"flock.subject.common.Analysis",
  	"flock.subject.common.Graph.Node",
  	"flock.subject.common.Analysis.Direction",
  	"flock.subject.common.CfgNodeId",
  	"flock.subject.common.Dependency",
  	"flock.subject.common.Helpers",
  	"flock.subject.common.FlockLattice",
  	"flock.subject.common.FlockLattice.MaySet",
  	"flock.subject.common.FlockLattice.MustSet",
  	"flock.subject.common.FlockLattice.SimpleMap",
  	"flock.subject.common.FlockLattice.FlockValueLattice",
  	"flock.subject.common.FlockLattice.FlockCollectionLattice",
  	"flock.subject.common.FlockValue",
  	"flock.subject.common.FlockValue.FlockValueWithDependencies",
  	"flock.subject.common.MapUtils",
  	"flock.subject.common.SetUtils",
  	"flock.subject.common.TransferFunction",
  	"flock.subject.common.UniversalSet"
  	//"flock.subject.live.Live",
  	//"flock.subject.live.LiveVariablesFlowAnalysis",
  	//"flock.subject.alias.PointsToFlowAnalysis",
  	//"flock.subject.value.ValueFlowAnalysis",
  	//"flock.subject.value.ValueFlowAnalysisProperties.ConstProp"
  ]