module codegen/graph

imports
  codegen/util
  codegen/instances
  codegen/lattices
  codegen/nodes
  codegen/cfg-matcher
  
  signatures/flock/-
  signatures/flock/desugar/-
  
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules

  property-type = !ClassType(Id("Property"), None())
  to-property-name = append-string(|"Property")
 
  concat-sets = filter(?(PropDef(_, _)));concat-sets-internal
  concat-sets-internal: [] -> StringLiteral("\"\\\"];\\n\"")
  concat-sets-internal: [h@PropDef(_, _) | t] -> Add(<propdef-to-literal> h, <concat-sets-internal> t)
  propdef-to-literal: PropDef(name, _) -> InvokeQExp(ExpressionName(AmbiguousName(Id("node")), Id(<to-property-name> name)), None(), Id("toGraphviz"), [])
  
  graph-type-id = !Id("CfgGraph")
  graph-type = !ClassType(<graph-type-id>, None())
  
  graph-class(|r): _ -> [java:type-dec |[
  	public class GraphFactory {

		~create-cfgs-method
		~create-cfg-method

		public static CfgNodeId getTermNodeId(IStrategoTerm n) {
			if (n.getAnnotations().size() == 0)
				return null;
			assert TermUtils.isAppl(n.getAnnotations().getSubterm(0), "FlockNodeId", 1);
			IStrategoInt id = (IStrategoInt) n.getAnnotations().getSubterm(0).getSubterm(0);
			return new CfgNodeId(id.intValue());
		}
  	}
  ]|]
  where
    create-cfg-method := <cfg-matcher-method> r
  ; create-cfgs-method := <cfg-collector-method> r
  
  get-forward-updaters = get-forwards;map(name-to-updater);concat
  get-backward-updaters = get-backwards;map(name-to-updater);concat
  
  name-to-updater: name -> java:bstm* |[
  	Object ~old-name = successor.getProperty(~prop-name).value;
	if (node.getProperty(~prop-name).lattice.nleq(~new-name, ~old-name)) {
		successor.getProperty(~prop-name).value = node.getProperty(~prop-name).lattice.lub(~old-name, ~new-name);
		changed = true;
	}	  
  ]|
  where
    old-name := $[[name]_o]
  ; new-name := $[[name]_n]
  ; prop-name := <to-string-literal> name
  
  to-new-name = append-string(|"_n")
  to-old-name = append-string(|"_o")
  
  get-backwards = filter(?PropRule(_, Backward(_, _), _, _));map(get-name);uniq
  get-forwards = filter(?PropRule(_, Forward(_, _), _, _));map(get-name);uniq
  get-name: PropRule(name, _, _, _) -> name
