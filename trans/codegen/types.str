module codegen/types

imports

  codegen/expressions

  signatures/flock/-
  signatures/flock/desugar/-

  signatures/java/classes/-
  signatures/java/lexical/-
  signatures/java/types/-

strategies

  simple-cast(|type): expr -> <simple-cast> (type, expr)
  simple-cast: (UserTypeParams(t, _), expr) -> java |[ (~t) ~expr ]|
  simple-cast: (Map(_, _), expr) -> java |[ (Map) ~expr ]|
  simple-cast: (Set(_), expr) -> java |[ (Set) ~expr ]|
  simple-cast: (typename, expr) -> java |[ (~typename) ~expr ]| with <is-string> typename

  construct-from(|type): expr -> <construct-from> (type, expr)
  construct-from: (UserTypeParams(name, _), expr) -> java:expr |[ new ~name(~expr) ]| with <is-string> name
  construct-from: (SimpleTypeTerm(), expr) -> java:expr |[ Helpers.toTerm(~expr) ]| // Create specific variant?
  construct-from: (Map(_, _), expr) -> java |[ new HashMap(~expr) ]|
  construct-from: (Set(_), expr) -> java |[ SetUtils.create(~expr) ]|
  construct-from: (String(), expr) -> java |[ TermUtils.asString(~expr).get() ]|
  construct-from: (name, expr) -> java:expr |[ new ~name(~expr) ]| with <is-string> name
  
  type-to-java-type: UserTypeParams(name, _) -> ClassType(Id(name), None()) with <is-string> name
  type-to-java-type: Map(_, _) -> ClassType(Id("Map"), None())
  type-to-java-type: Set(_) -> ClassType(Id("Set"), None())
  //type-to-java: UserTypeParams(name, args) -> ClassType([], Id(name), Some(TypeArguments(<map(type-to-java)> args))) with <is-string> name
  
  type-to-java-annot-type: UserTypeParams(name, _) -> ClassType([], Id(name), None()) with <is-string> name
  type-to-java-annot-type: Map(_, _) -> ClassType([], Id("SimpleMap"), None())
  type-to-java-annot-type: Set(_) -> ClassType([], Id("Set"), None())
  
  lattice-type-to-superclass: Map(_, _) -> "SimpleMap"
  
  lattice-kind-to-interface: Value() -> "FlockValueLattice"
  lattice-kind-to-interface: Collection() -> "FlockCollectionLattice"
  lattice-kind-to-interface: None() -> "FlockLattice"
    
  type-extends-lattice: Map(_, _) -> <id>
  type-extends-lattice: UserTypeParams(name, _) -> <fail>
  
  is-map: "SimpleMap" -> <id>
  
  requires-statements = ?MapComp(_, _, _, _) + ?SetComp(_, _, _, _) + ?Match(_, _) + ?Let(_, _)
  