module codegen/helpers

imports
  codegen/util
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  cast-to-term: expr -> InvokeQExp(ExpressionName(Id("Helpers")), None(), Id("toTerm"), [expr])
  get-subterm(|index): expr -> InvokeQExp(ExpressionName(Id("Helpers")), None(), Id("at"), [expr, Deci(<int-to-string> index)])
  add-or-concat: (l, r) -> InvokeQExp(ExpressionName(Id("Helpers")), None(), Id("add"), [l, r])
  helper-class: _ -> [java:type-dec |[
	public class Helpers {
		public static IStrategoTerm toTerm(Object o) {
			if (o instanceof IStrategoTerm) {
				return (IStrategoTerm) o;
			}
			if (o instanceof Integer) {
				return new StrategoInt((int) o);
			}
			if (o instanceof String) {
				return new StrategoString((String) o, null);
			}
			if (o instanceof Set) {
				Set s = (Set) o;
				Object[] elements = s.toArray();
				IStrategoList result = new StrategoList(toTerm(elements[elements.length - 1]), null, null);
				for (int i = elements.length - 2; i >= 0; i--) {
					result = new StrategoList(toTerm(elements[i]), result, null);
				}
				return result;
			}
			throw new RuntimeException(~runtime-exception);
		}
	
		public static IStrategoTerm at(IStrategoTerm term, int index) {
			if (term instanceof IStrategoTuple) {
				IStrategoTuple tuple = (IStrategoTuple) term;
				return tuple.get(index);
			}
			IStrategoAppl appl = (IStrategoAppl) term;
			return appl.getSubterm(index);
		}
	
		public static Object add(Object l, Object r) {
			l = extractPrimitive(l);
			r = extractPrimitive(r);
			if (l instanceof Integer && r instanceof Integer) {
				return (int) l + (int) r;
			}
			return l.toString() + r.toString();
		}
	
		public static Object extractPrimitive(Object o) {
			if (o instanceof StrategoInt) {
				StrategoInt term = (StrategoInt) o;
				return term.intValue();
			}
			if (o instanceof StrategoString) {
				StrategoString term = (StrategoString) o;
				return term.stringValue();
			}
			return o;
		}
	}
  ]|] where runtime-exception := <to-string-literal> "Could not identify proper term type."