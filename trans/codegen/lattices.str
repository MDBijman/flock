module codegen/lattices

imports
  codegen/util
  codegen/setutils
  codegen/types
  codegen/expressions
  
  signatures/flock/-
  signatures/flock/desugar/-
  
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  create-lattice-map: r -> <filter(?PropDef(_, _, _));map(create-lattice-tuple)> r
  create-lattice-tuple: PropDef(prop, UserTypeParams(lattice, _), _) -> (prop, lattice)
  
  lattice-type-name = !"FlockLattice"
  lattice-type-id = !Id(<lattice-type-name>)
  lattice-type = !ClassType(<lattice-type-id>, None())
  to-lattice-name: Map(k, v) -> "SimpleMap"
  to-lattice-name: UserTypeParams(name, _) -> name
  to-lattice-name: n -> n
   
  lattice-classes(|r) = <filter(?LatticeDefParams(_, _, _, _));create-all-lattice-classes> r
  create-all-lattice-classes: r -> <map(lattice-to-class)> r
  
  lattice-invocation(|lattice, f): args -> InvokeQExp(NewInstance(None(), [], Id(<to-lattice-name> lattice), [], None(), <lattice-to-constructor-args> lattice), None(), Id(f), <map(transform-expr)> args)
  lattice-top(|lattice): _       -> java:expr |[ ~name.top()    ]| where name := <to-lattice-name> lattice
  lattice-bottom(|lattice): _    -> java:expr |[ ~name.bottom() ]| where name := <to-lattice-name> lattice
  lattice-lub(|lattice): (l, r)  -> java:expr |[ new ~name(~new_l).lub(~new_r)  ]| where name := <to-lattice-name> lattice; new_l := <transform-expr> l; new_r := <transform-expr> r 
  lattice-glb(|lattice): (l, r)  -> java:expr |[ new ~name(~new_l).glb(~new_r)  ]| where name := <to-lattice-name> lattice; new_l := <transform-expr> l; new_r := <transform-expr> r 
  lattice-leq(|lattice): (l, r)  -> java:expr |[ new ~name(~new_l).leq(~new_r)  ]| where name := <to-lattice-name> lattice; new_l := <transform-expr> l; new_r := <transform-expr> r
  lattice-geq(|lattice): (l, r)  -> java:expr |[ new ~name(~new_l).geq(~new_r)  ]| where name := <to-lattice-name> lattice; new_l := <transform-expr> l; new_r := <transform-expr> r
  lattice-nleq(|lattice): (l, r) -> java:expr |[ new ~name(~new_l).nleq(~new_r) ]| where name := <to-lattice-name> lattice; new_l := <transform-expr> l; new_r := <transform-expr> r
  
  lattice-to-constructor-args: Map(ktype, UserTypeParams(vtype, _)) -> [NewInstance(None(), [], Id(name), [], None(), [])] with name := <to-lattice-name> vtype
  lattice-to-constructor-args = ![]

  lattice-to-class: LatticeDefParams(name, _, kind, functions) -> class
  where
    inner-type := <getfirst(lattice-part-type)> functions
  ; lattice-value-name := <to-lattice-name> inner-type
  ; value-field := <type-extends-lattice < ![] + ![java:classb-dec |[ ~lattice-value-name value; ]|]> inner-type
  where
    lattice-name    := <to-lattice-name> name
  ; constructor     := <lattice-constructors> (lattice-name, lattice-value-name)
  ; value-getter    := <lattice-value-getter> inner-type
  ; equals          := <lattice-equals> lattice-name
  ; to-string       := <lattice-to-string> inner-type
  ; copy            := <lattice-copy> lattice-name
  ; lattice-methods := <map(to-lattice-method(|lattice-name, lattice-value-name, kind))> functions
  where
    superclass-name := <lattice-type-to-superclass> inner-type
  ; interface-name  := <lattice-kind-to-interface> kind
  ; class := java:type-dec |[
    class ~lattice-name extends ~superclass-name implements ~interface-name {
      ~*value-field
      ~*constructor
      ~*value-getter
      ~*equals
      ~*to-string
      ~*lattice-methods
      ~*copy
    }
  ]|
  <+ interface-name  := <lattice-kind-to-interface> kind
   ; class := java:type-dec |[
     class ~lattice-name implements ~interface-name {
       ~*value-field
       ~*constructor
       ~*value-getter
       ~*equals
       ~*to-string
       ~*lattice-methods
       ~*copy
     }
   ]|
  <+ class := java:type-dec |[
     class ~lattice-name {
       ~*value-field
       ~*constructor
       ~*value-getter
       ~*equals
       ~*to-string
       ~*lattice-methods
       ~*copy
     }
   ]|
      
  lattice-part-type: LatticePartType(t) -> t
  access-lattice-value: expr -> java:expr |[ ((FlockLattice) ~expr).value() ]|
  access-value-term: (UserTypeParams(type, _), name) -> java:expr |[((~t) ~name).value]| with t := <concat-strings> [type, "Value"]
  
  /*
  * Lattice Constructor
  */
  lattice-constructors: (lattice-name, value-name) -> classb-dec* |[
    public ~lattice-name(~lattice-name o) {
    	~constrinit:superinit
    }
  
    public ~lattice-name(~value-name v) {
    	~constrinit:superinit
    }
  ]|
  where
    <is-map> value-name
  with
    superinit := java:constrinv |[ super(v); ]| 

  lattice-constructors: (lattice-name, value-name) -> classb-dec* |[
    public ~lattice-name(~lattice-name o) {
    	this.value = o.value;
    }
 
    public ~lattice-name(~value-name v) {
    	~bstm:constrinit
    }
  ]|
  with
    constrinit := java:bstm |[ this.value = v; ]| 
  
  lattice-value-getter: value-name -> [classb-dec |[
    @Override
    public FlockValue value() {
		return this.value;
    }
  ]|] where <not(type-extends-lattice)> value-name
  lattice-value-getter: lattice-name -> []
  
  lattice-equals: lattice-name -> [classb-dec |[
    @Override
    public boolean equals(Object other) {
		if (other == null)
			return false;
		if (other == this)
			return true;
		if (other.getClass() != this.getClass())
			return false;
		~lattice-name rhs = (~lattice-name) other;
		return this.value.equals(rhs.value);
    }
  ]|]
  
  lattice-to-string: value-name -> [classb-dec |[
    @Override
    public String toString() {
		return value.toString();
    }
  ]|] where <not(type-extends-lattice)> value-name
  lattice-to-string: value-name -> []
  
  lattice-copy: lattice-name -> [classb-dec |[
    @Override
    public FlockLattice copy() {
		return new ~lattice-name(this);
    }
  ]|]


  /*
  * The inner lattice type declaration does not map to a method
  */
  to-lattice-method(|lattice-name, lattice-value-name, kind): LatticePartType(_) -> []
    
  /*
  * Lattice method: Top
  */
  to-lattice-method(|lattice-name, lattice-value-name, kind): Top(expr) -> java:method-dec |[
    public static ~lattice-name top() {
      ~bstm*:stmts
      return ~res;
    }
  ]|
  where <requires-statements> expr
  with (res, stmts) := <expr-to-stmts> expr
  
  to-lattice-method(|lattice-name, lattice-value-name, kind): Top(expr) -> java:method-dec |[
    public static ~lattice-name top() {
      return ~java-expr;
    }
  ]| where java-expr := <transform-expr> expr
    
  /*
  * Lattice method: Bottom
  */
    to-lattice-method(|lattice-name, lattice-value-name, kind): Bottom(expr) -> java:method-dec |[
    public static ~lattice-name bottom() {
      ~bstm*:stmts
      return ~res;
    }
  ]|
  where <requires-statements> expr
  with (res, stmts) := <expr-to-stmts> expr
  
  to-lattice-method(|lattice-name, lattice-value-name, kind): Bottom(expr) -> java:method-dec |[
    public static ~lattice-name bottom() {
      return ~java-expr;
    }
  ]|
  where java-expr := <transform-expr> expr
  
  /*
  * Lattice method: Least Upper Bound (Typed Arguments)
  */
  to-lattice-method(|lattice-name, lattice-value-name, kind): Lub(TypedParam(l, lt), TypedParam(r, rt), expr) -> java:method-dec |[
    @Override
    public boolean lub(FlockLattice other) {
      ~*decls-l
      ~*decls-r
      ~bstm*:stmts
      ~lattice-name _res_lat = ~res;
      boolean _is_changed = !this.equals(_res_lat);
      this.value = _res_lat.value;
      return _is_changed;
    }
  ]|
  where <requires-statements> expr
  with
    decls-l := <make-local-declarations> (lattice-name, "this", l, lt)
  ; decls-r := <make-local-declarations> (lattice-name, "other", r, rt)
  ; (res, stmts) := <expr-to-stmts> expr
  
  to-lattice-method(|lattice-name, lattice-value-name, kind): Lub(TypedParam(l, lt), TypedParam(r, rt), expr) -> java:method-dec |[
    @Override
    public boolean lub(FlockLattice other) {
      ~*decls-l
      ~*decls-r
       ~lattice-name _res_lat = ~java-expr;
      boolean _is_changed = !this.equals(_res_lat);
      this.value = _res_lat.value;
      return _is_changed;
    }
  ]|
  with
    java-expr := <transform-expr; simple-cast(|lattice-value-name); construct-from(|lattice-name)> expr
  ; decls-l := <make-local-declarations> (lattice-name, "this", l, lt)
  ; decls-r := <make-local-declarations> (lattice-name, "other", r, rt)


  /*
  * Lattice method: Least Upper Bound
  */
  to-lattice-method(|lattice-name, lattice-value-name, kind): Lub(l, r, expr) -> <fail> "Not implemented"
  
  /*
  * Lattice method: Greatest Lower Bound
  */
  to-lattice-method(|lattice-name, lattice-value-name, kind): Glb(l, r, expr) -> <fail> "Not implemented"


  /*
  * Lattice method: Less or Equal
  */
  to-lattice-method(|lattice-name, lattice-value-name, kind): Leq(l, r, expr) -> java:method-dec |[
    @Override
    public boolean leq(~lattice-name ~rname) {
      ~lattice-value-name ~rname = ~rcast;
      ~lattice-value-name ~lname = ~lcast;
      return (boolean) ~java-expr;
    }
  ]|
  where
    java-expr := <transform-expr> expr
  ; lname := <access-value-term> (l, "this")
  ; rname := <access-value-term> (r, "other")
  ; lcast := <simple-cast(|lattice-value-name)> java:expr |[ this.value() ]| 
  ; rcast := <simple-cast(|lattice-value-name)> java:expr |[ r.value() ]| 

  /*
  * Lattice method: Greater or Equal
  */
  to-lattice-method(|lattice-name, lattice-value-name, kind): Geq(l, r, expr) -> java:method-dec |[
    @Override
    public boolean geq(~lattice-name ~l, ~lattice-name ~r) {
      return (boolean) ~java-expr;
    }
  ]|
  where java-expr := <transform-expr> expr
 
  /*
  * Lattice method: Not Less or Equal
  */
  to-lattice-method(|lattice-name, lattice-value-name, kind): NLeq(l, r, expr) -> java:method-dec |[
    @Override
    public boolean nleq(~lattice-name ~l, ~lattice-name ~r) {
      return (boolean) ~java-expr;
    }
  ]|
  where java-expr := <transform-expr> expr

  /*
  * Helpers
  */
    
  make-local-declarations: (lattice-name, java-name, flock-name, type) -> [
    java:bstm |[ ~inner-type ~flock-name = ((~lattice-name) ~java-name).value /*above must be concrete type*/; ]|
  ]
  where
    inner-type := <type-to-java-type> type
  

