module codegen/nodes

imports
  codegen/util
  codegen/cfg-matcher
  codegen/transfer-functions
  codegen/expressions
  codegen/lattices
  
  signatures/flock/-
  signatures/flock/desugar/-
  
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  node-type-name = !"Node"
  node-type-id = !Id(<node-type-name>)
  node-type = !ClassType(<node-type-id>, None())
  node-set-type = node-type;to-set-type

  node-factory-switch: r -> Block(<get-sorted-proprules; number(node-factory-switch-entry)>)
  get-sorted-proprules = filter(?PropRule(_, _, _, _));reverse
  
  node-factory-switch-entry: (PropRule(prop, pat, _, _), index) -> If(<cfg-pattern-to-condition(|"node.term", [])> pat, Block([setter]))
  where
    function := <get-transfer-function> index;
    setvar := <pattern-to-setter(|prop)> pat;
    setter := ExpressionStatement(Assign(setvar, function))
  
  pattern-to-setter(|prop): Backward(_, _) -> <pattern-to-transfer-setter> prop
  pattern-to-setter(|prop): Forward(_, _) -> <pattern-to-transfer-setter> prop
  pattern-to-transfer-setter: prop -> Field(<make-property-get(|"node")>, Id("transfer"))
  pattern-to-setter(|prop): PropPatternStart(_) -> <pattern-to-init-setter> prop
  pattern-to-setter(|prop): PropPatternEnd(_) -> <pattern-to-init-setter> prop
  pattern-to-init-setter: prop -> Field(<make-property-get(|"node")>, Id("init"))

  make-property-get(|node): name -> InvokeQExp(ExpressionName(Id(node)), None(), Id("getProperty"), [StringLiteral(<to-string-literal> name)])
  
