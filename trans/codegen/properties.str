module codegen/properties

imports
  codegen/universalset
  codegen/util
  codegen/lattices
  codegen/transfer-functions
  codegen/user-functions
  codegen/nodes
  
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  property-type-name = !"Property"
  property-type-id = !Id(<property-type-name>)
  property-type = !ClassType(<property-type-id>, None())
  to-property-name = append-string(|<property-type-name>)

  property-class: _ -> [
  	java:type-dec |[
  		public class Property {
			String name;
			public Lattice lattice;
			public TransferFunction transfer;
			public TransferFunction init;
			public Object value;
		
			public Property(String name, Lattice lattice) {
				this.name = name;
				this.lattice = lattice;
			}
		
			public Object getValue() {
				return value;
			}
		
			public String toGraphviz() {
				return ~space + name + ~eq + valueToString(value);
			}
		
			private static String valueToString(Object value) {
				if (value instanceof UniversalSet) {
					return ~str-rep;
				}
				if (value instanceof Set) {
					return ~lbracket
							+ String.join(~comma,
									((Set<Object>) value).stream().map(v -> valueToString(v)).collect(Collectors.toList()))
							+ ~rbracket;
				}
				if (value instanceof String) {
					return ~quote + value + ~quote;
				
				}
				return ~escaped-value;
			}
		}
  	]|
  ]
  where
    escaped-value := <escape-string-expr> "value.toString()" 
  ; str-rep  := <to-string-literal> "{...}"
  ; space := <to-string-literal> " "
  ; eq    := <to-string-literal> "="
  ; lbracket := <to-string-literal> "{"
  ; rbracket := <to-string-literal> "}"
  ; comma    := <to-string-literal> ", "
  ; quote    := <to-string-literal> "\\\\\\\""
  
  property-function: PropDef(name, _) -> java:method-dec |[
    public static Object ~fun-name(Object o) {
      CfgNode node = (CfgNode) o;
      return node.getProperty(~prop-name).value;
    }
  ]|
  where
    fun-name := <to-function-name> name
  ; prop-name := <to-string-literal> name
  