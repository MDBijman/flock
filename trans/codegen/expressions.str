module codegen/expressions

imports
  codegen/util
  codegen/setutils
  codegen/lattices
  codegen/cfg-matcher
  codegen/user-functions
  codegen/types

  signatures/flock/-
  signatures/flock/desugar/-

  signatures/java/arrays/-
  signatures/java/types/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/literals/-
  signatures/java/lexical/-
  signatures/java/names/-
  signatures/java/interfaces/-
  signatures/java/statements/-
  signatures/java/packages/-

rules
  expr-to-stmts: MapComp(m@MapBinding(a, b), _, _, predicates) -> <map-comp-body(|[])> (m, predicates)
  expr-to-stmts: SetComp(expr, _, _, predicates) -> <set-comp-body(|[])> (expr, predicates)
  expr-to-stmts: m@Match(_, _) -> <match-to-stmts> m
  expr-to-stmts: _ -> []

  // Overload - be careful, this can cause issues when bindings aren't passed correctly.
  transform-expr = transform-expr(|[])
  
  // Sets
  transform-expr(|bindings): SetLiteral(l) -> <set-create> <map(transform-expr)> l
  transform-expr(|bindings): TypedSetLiteral(l, t) -> <set-create> <map(transform-expr)> l
  transform-expr(|bindings): Contains(element, set) -> InvokeQExp(<transform-expr(|bindings)> set, None(), Id("contains"), [<transform-expr(|bindings)> element])
  transform-expr(|bindings): SetComp(expr, _, _, predicates) -> <fail> with <debug> "Set comprehension must not be nested expression"
  transform-expr(|bindings): SetCompExprPredicate(x) -> <transform-expr(|bindings)> x
  transform-expr(|bindings): Union(a, b) -> <set-union> [<transform-expr(|bindings)> a, <transform-expr(|bindings)> b]
  transform-expr(|bindings): Difference(a, b) -> <set-difference> [<transform-expr(|bindings)> a, <transform-expr(|bindings)> b]
  transform-expr(|bindings): Intersection(a, b) -> <set-intersection> [<transform-expr(|bindings)> a, <transform-expr(|bindings)> b] 
  
  // Maps
  transform-expr(|bindings): MapLiteral(l) -> <map-create> <map(transform-binding(|bindings)); flatten-list> l
  transform-expr(|bindings): MapComp(_, _, _, _) -> <fail> with <debug> "Mapcomp must not be nested expression"
  transform-expr(|bindings): MapCompExprPredicate(x) -> <transform-expr(|bindings)> x
  transform-binding(|bindings): MapBinding(k, v) -> [<transform-expr(|bindings)> k, <transform-expr(|bindings)> v]
  
  // Collections (runtime dispatched to collection type)
  transform-expr(|bindings): TypedUnion(a, UserTypeParams(t, _), b) -> <lattice-lub(|t)> (a, b)
  transform-expr(|bindings): TypedEmptyLiteral(Map(_, _)) -> <map-create> []
  transform-expr(|bindings): TypedEmptyLiteral(Set(_))    -> <set-create> []
  
  // Lattices
  transform-expr(|bindings): TopOf(lattice) -> <lattice-top(|lattice)>
  transform-expr(|bindings): BottomOf(lattice) -> <lattice-bottom(|lattice)>
  transform-expr(|bindings): Appl(LubOf(lattice), [l, r]) -> <lattice-lub(|lattice)> (l, r)
  transform-expr(|bindings): Appl(GlbOf(lattice), [l, r]) -> <lattice-glb(|lattice)> (l, r)
  transform-expr(|bindings): Appl(LeqOf(lattice), [l, r]) -> <lattice-leq(|lattice)> (l, r)
  transform-expr(|bindings): Appl(GeqOf(lattice), [l, r]) -> <lattice-geq(|lattice)> (l, r)
  transform-expr(|bindings): Appl(NLeqOf(lattice), [l, r]) -> <lattice-nleq(|lattice)> (l, r)
  transform-expr(|bindings): LatticeValue(e) -> <transform-expr(|bindings); access-lattice-value> e
  
  // Functions
  transform-expr(|bindings): PropOrAppl(func, arg) -> <invoke-function(|func)> [ExpressionName(Id(arg))]
  transform-expr(|bindings): Appl(Ref(func), args) -> <map(transform-expr);invoke-function(|func)> args
  
  // Literals
  transform-expr(|bindings): ExprLiteral(literal) -> <transform-expr(|bindings)> literal
  transform-expr(|bindings): StringLiteral(x) -> StringLiteral(x)
  transform-expr(|bindings): IntLiteral(x) -> Deci(x)
  transform-expr(|bindings): TrueLiteral() -> True()
  transform-expr(|bindings): FalseLiteral() -> False()
  
  // Non-sets
  transform-expr(|bindings): WithOrigin(expr, vars) -> <transform-expr(|bindings); add-origins(|vars)> expr
  transform-expr(|bindings): Cast(expr, type) -> <transform-expr(|bindings); construct-from(|type)> expr
  transform-expr(|bindings): ExprExprRef(x) -> <transform-expr(|bindings)> x
  transform-expr(|bindings): Ref(name) -> java:expr |[ ~name ]|
  transform-expr(|bindings): TypedRef(name, UserTypeParams(type, _)) -> java:expr |[ new ~type(~name) ]|
  transform-expr(|bindings): TypedRef(x, Name()) -> java:expr |[ ((IStrategoString) x).stringValue() ]|
  transform-expr(|bindings): TypedRef(x, String()) -> java:expr |[ ((IStrategoString) x).stringValue() ]|
  transform-expr(|bindings): Match(expr, arms) -><fail> with <debug> "Match must not be nested expression"
   
  transform-expr(|bindings): NEq(l, r)    -> Not(InvokeQExp(<transform-expr(|bindings)> l, None(), Id("equals"), [<transform-expr(|bindings)> r]))
  transform-expr(|bindings): Eq(l, r)     -> InvokeQExp(<transform-expr(|bindings)> l, None(), Id("equals"), [<transform-expr(|bindings)> r])
  transform-expr(|bindings): Not(x)       -> Not(<transform-expr(|bindings);cast-to-bool> x)
  transform-expr(|bindings): Predicate(x) -> <transform-expr(|bindings)> x
  transform-expr(|bindings): If(i, t, e)  -> Cond(<transform-expr(|bindings);cast-to-bool> i, <transform-expr(|bindings)> t, <transform-expr(|bindings)> e)
  transform-expr(|bindings): And(l, r)    -> LazyAnd(<transform-expr(|bindings);cast-to-bool> l, <transform-expr(|bindings);cast-to-bool> r)
  transform-expr(|bindings): Or(l, r)     -> LazyOr(<transform-expr(|bindings);cast-to-bool> l, <transform-expr(|bindings);cast-to-bool> r)
  transform-expr(|bindings): Add(l, r)    -> <add-or-concat> (<transform-expr(|bindings)> l, <transform-expr(|bindings)> r)
  transform-expr(|bindings): Sub(l, r)    -> Sub(<transform-expr(|bindings);cast-to-int> l, <transform-expr(|bindings);cast-to-int> r)
  transform-expr(|bindings): Mul(l, r)    -> Mul(<transform-expr(|bindings);cast-to-int> l, <transform-expr(|bindings);cast-to-int> r)
  transform-expr(|bindings): Div(l, r)    -> Div(<transform-expr(|bindings);cast-to-int> l, <transform-expr(|bindings);cast-to-int> r)
  transform-expr(|bindings): Mod(l, r)    -> Mod(<transform-expr(|bindings);cast-to-int> l, <transform-expr(|bindings);cast-to-int> r)
  transform-expr(|bindings): Neg(x)       -> Minus(<transform-expr(|bindings);cast-to-int> x)
  transform-expr(|bindings): Lt(l, r)     -> Lt(<transform-expr(|bindings);cast-to-int> l, <transform-expr(|bindings);cast-to-int> r)
  transform-expr(|bindings): Lte(l, r)    -> LtEq(<transform-expr(|bindings);cast-to-int> l, <transform-expr(|bindings);cast-to-int> r)
  transform-expr(|bindings): Gt(l, r)     -> Gt(<transform-expr(|bindings);cast-to-int> l, <transform-expr(|bindings);cast-to-int> r)
  transform-expr(|bindings): Gte(l, r)    -> GtEq(<transform-expr(|bindings);cast-to-int> l, <transform-expr(|bindings);cast-to-int> r)
  transform-expr(|bindings): ExprTuple(l, r) -> NewInstance(None(), [], Id("StrategoTuple"), [], None(), [ NewArrayInit(ClassType([], Id("IStrategoTerm"), None()), [AnnotateDim([])], ArrayInit(<concat> [[<transform-expr(|bindings);cast-to-term> l], <map(transform-expr(|bindings);cast-to-term)> r])), Null()])
  transform-expr(|bindings): Occurrence(namespace, name) -> Null() // FIXME
  
  transform-expr(|bindings): TermIndex(r) -> java:expr |[ ~r.getProperty(~string).lattice ]|
  where
    string := <to-string-literal> "position"

  transform-expr(|bindings): TypedExprTerm(UserTypeParams(type, _), constructor, args) -> java:expr |[ new ~type(e) ]|
  where
    e := <transform-expr(|bindings)> ExprTerm(constructor, args)
  transform-expr(|bindings): ExprTerm(constructor, args) -> NewInstance(
    None()
  , []
  , Id("StrategoAppl")
  , []
  , None()
  , [ NewInstance(
        None()
      , []
      , Id("StrategoConstructor")
      , []
      , None()
      , [StringLiteral(<to-string-literal> constructor), Deci(<length;int-to-string> args)]
      )
    , NewArrayInit(
        ClassType([], Id("IStrategoTerm"), None())
      , [AnnotateDim([])]
      , ArrayInit(<map(transform-expr(|bindings);cast-to-term)> args)
      )
    , Null()
    ]
  )
  
  match-to-stmts: x@Match(expr, arms) -> (result, <concat> [
      [LocVarDeclStm(LocalVarDecl([], ClassType(Id("IStrategoTerm"), None()), [ VariableDeclInit(VariableDecl(Id(rootterm)), <transform-expr(|[]); cast-to-term> expr)]))],
      [java:bstm |[ FlockLattice ~result = null; ]|],
      <map(match-arm-to-if(|result, rootterm, []))> arms,
      [java:bstm |[ if (~result == null) { throw new RuntimeException(~exception-string); } ]|]
    ])
  where
    rootterm := <newname> "term" 
  ; result := <newname> "result"
  ; exception-string := <to-string-literal> "Could not match term"
  
  match-arm-to-if(|result-name, rootterm, bindings): MatchArm(pattern, expr) -> If(<cfg-pattern-to-condition(|rootterm, bindings)> pattern, Block(statements))
  where
    pattern-vars := <pattern-to-decls(|rootterm, bindings)> pattern
  ; newbindings := <concat; uniq> [bindings, <get-bindings> pattern]
  ; result := <transform-expr(|newbindings)> expr
  ; write-result := java:bstm |[ ~result-name = ~result; ]|
  ; statements := <concat> [pattern-vars, [write-result]]
    
  cast-to-int: expr -> CastPrimitive(NumericType([], Int()), expr)
  cast-to-bool: expr -> CastPrimitive(BooleanType([]), expr)
  
  add-origins(|vars): e -> <add-origins> (vars, e)
  add-origins: ([], e) -> e
  add-origins: ([Var(v)|t], e)      -> <add-origins> (t, java:expr |[ e.withOrigin(~v.dependencies()) ]|)
  add-origins: ([Position(v)|t], e) -> <add-origins> (t, java:expr |[ e.withOrigin(Helpers.getTermPosition(~v)) ]|)
  
  // set comprehension
  set-comp-body(|bindings): (expr, predicates) -> (name, [
    java:bstm |[ Set ~name = new HashSet(); ]|,
    <set-comp-sources(|expr, nonsources, bindings, name)> sources
  ])
  where
    name := <newname> "result"
  ; sources := <filter(?SetCompExprSource(_))> predicates
  ; nonsources := <filter(not(?SetCompExprSource(_)))> predicates
  
  set-comp-result(|bindings): name -> java:expr |[ name ]| 
  
  set-comp-sources(|expr, predicates, bindings, result-name): [] -> <set-comp-predicates(|bindings, result-name)> (expr, predicates)
  set-comp-sources(|expr, predicates, bindings, result-name): [SetCompExprSource(SetSource(PatternVar(var), set))|tail] ->
  	java:bstm |[
  		for (Object ~var : ~collection) {
  			~stmts*
  		}
  	]|
  with
    collection := <transform-expr(|bindings); access-lattice-value; cast-to-set> set
  ; stmts*     := [<set-comp-sources(|expr, predicates, bindings, result-name)> tail]

  set-comp-predicates(|bindings, result-name): (expr, []) -> ExpressionStatement(InvokeQExp(ExpressionName(Id(result-name)), None(), Id("add"), [<transform-expr(|bindings)> expr]))
  set-comp-predicates(|bindings, result-name): (expr, [h|t]) -> If(<transform-expr(|bindings)> h, Block([<set-comp-predicates(|bindings, result-name)> (expr, t)]))
  
  // map comprehension
  map-comp-body(|bindings): (bind, predicates) -> (name, [
  	java:bstm |[ Map ~name = new HashMap(); ]|,
    <map-comp-sources(|bind, nonsources, bindings, name)> sources
  ])
  where
  	name := <newname> "result"
  ; sources := <filter(?MapCompExprSource(_))> predicates
  ; nonsources := <filter(not(?MapCompExprSource(_)))> predicates
  
  map-comp-sources(|bind, predicates, bindings, result-name): [] -> <map-comp-predicates(|bindings, result-name)> (bind, predicates)
  map-comp-sources(|bind, predicates, bindings, result-name): [MapCompExprSource(MapSource(PatternVar(k), PatternVar(v), map))|tail] -> 
    java:bstm |[
      for (Object o : ~map-expr) {
      	Entry entry = (Entry) o;
        Object k_t = entry.getKey();
        Object v_t = entry.getValue();
        ~loop-stmt
      }
    ]|
  with 
    map-expr  := <transform-expr(|bindings)> map
  ; loop-stmt := <map-comp-sources(|bind, predicates, bindings, result-name)> tail
    
  map-comp-predicates(|bindings, result-name): (MapBinding(k, v), []) -> ExpressionStatement(InvokeQExp(ExpressionName(Id(result-name)), None(), Id("put"), [<transform-expr(|bindings)> k, <transform-expr(|bindings)> v]))
  map-comp-predicates(|bindings, result-name): (bind, [h|t]) -> If(<transform-expr(|bindings)> h, Block([<map-comp-predicates(|bindings, result-name)> (bind, t)]))
    
  // Unsupported expressions
  transform-expr(|bindings) = debug(!"Unsupported expression found ");fail
  