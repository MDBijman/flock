module flock/Type

imports

flock/Common
flock/Pattern
flock/Expr

template options
tokenize: "!.,(["

context-free syntax // Type definitions
	
	TypeDef.TypeDefParams =
	<<TypeName>[<{Var ", "}+>] <TypeKind> =
	  <{ConsDef "\n"}+>>
	
	TypeDef.TypeDefNoParams =
	<<TypeName> <TypeKind> =
	  <{ConsDef "\n"}+>>
	
	ConsDef.ConsDef = [| [ConsName]([{TypeOrVar ", "}*])]
	
	TypeOrVar = Type {prefer}
	TypeOrVar.TypeVar = Var
	
	TypeKind.WithDependencies = [with dependencies]
	TypeKind.None = []

context-free syntax // Lattice definitions
	
	// TODO: no need for the Var*?
	LatticeDef.LatticeDefParams =
	<<TypeName>[<{Var ", "}+>] <LatticeKind> where
	  <{LatticePart "\n"}+>>
	
	LatticeDef.LatticeDefNoParams =
	<<TypeName> <LatticeKind> where
	  <{LatticePart "\n"}+>>
	
	LatticeKind.ValueWithDependencies = [is value with dependencies]
	LatticeKind.Value = [is value]
	LatticeKind.CollectionWithDependencies = [is collection with dependencies]
	LatticeKind.Collection = [is collection]
	LatticeKind.None = []
	
	LatticePart.LatticePartType = [type = [Type]]
	LatticePart.Lub = [lub([Param], [Param]) = [Expr]]
	LatticePart.Glb = [glb([Var], [Var]) = [Expr]]
	LatticePart.Leq = [leq([Var], [Var]) = [Expr]]
	LatticePart.Geq = [geq([Var], [Var]) = [Expr]]
	LatticePart.NLeq = [nleq([Var], [Var]) = [Expr]]
	LatticePart.Top = [top = [Expr]]
	LatticePart.Bottom = [bottom = [Expr]]

    Param.Param = Var
    Param.TypedParam = [[Var]: [Type]]

context-free syntax // Type expressions
	
	Type = SimpleType
	SimpleType.Name = "name"
	SimpleType.SimpleTypeTerm = "term"
	SimpleType.Index = "position"
	SimpleType.Int = "int"
	SimpleType.String = "string"
	SimpleType.Float = "float"
	SimpleType.Bool = "bool"
	Type = [([Type])] {bracket}
	Type.TypeTuple = [[TypeOrVar] * [TypeOrVar]] {right}
	Type.Map = <Map[<TypeOrVar>, <Type>]>
	Type.Set = <Set[<TypeOrVar>]>
	
	Type = UserType
	UserType.UserTypeNoParams = <<TypeName>> {avoid}
	UserType.UserTypeParams = <<TypeName>[<{TypeOrVar ", "}+>]> {avoid}

context-free priorities
	
	{ Type.Set Type.Map UserType.UserTypeNoParams UserType.UserTypeParams } > Type.TypeTuple
